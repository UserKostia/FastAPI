# encoding: utf-8
# module black.nodes
# from C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\nodes.cp311-win_amd64.pyd
# by generator 1.147
# no doc

# imports
import sys as sys # <module 'sys' (built-in)>
import blib2to3.pygram as pygram # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\blib2to3\pygram.cp311-win_amd64.pyd
import blib2to3.pgen2.token as token # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\blib2to3\pgen2\token.cp311-win_amd64.pyd
from black.mode import Mode, Preview

from black.strings import get_string_prefix, has_triple_quotes

from blib2to3.pygram import syms

from blib2to3.pytree import Leaf, Node, type_repr

import typing as __typing


# Variables with simple values

RARROW = 55

STANDALONE_COMMENT = 153

# functions

def child_towards(*args, **kwargs): # real signature unknown
    pass

def container_of(*args, **kwargs): # real signature unknown
    pass

def ensure_visible(*args, **kwargs): # real signature unknown
    pass

def Final(*args, **kwargs): # real signature unknown
    """
    Special typing construct to indicate final names to type checkers.
    
        A final name cannot be re-assigned or overridden in a subclass.
    
        For example::
    
            MAX_SIZE: Final = 9000
            MAX_SIZE += 1  # Error reported by type checker
    
            class Connection:
                TIMEOUT: Final[int] = 10
    
            class FastConnector(Connection):
                TIMEOUT = 1  # Error reported by type checker
    
        There is no runtime checking of these properties.
    """
    pass

def first_leaf(*args, **kwargs): # real signature unknown
    pass

def first_leaf_of(*args, **kwargs): # real signature unknown
    pass

def fstring_to_string(*args, **kwargs): # real signature unknown
    pass

def furthest_ancestor_with_last_leaf(*args, **kwargs): # real signature unknown
    pass

def get_annotation_type(*args, **kwargs): # real signature unknown
    pass

def is_arith_like(*args, **kwargs): # real signature unknown
    pass

def is_async_stmt_or_funcdef(*args, **kwargs): # real signature unknown
    pass

def is_atom_with_invisible_parens(*args, **kwargs): # real signature unknown
    pass

def is_docstring(*args, **kwargs): # real signature unknown
    pass

def is_empty_lpar(*args, **kwargs): # real signature unknown
    pass

def is_empty_par(*args, **kwargs): # real signature unknown
    pass

def is_empty_rpar(*args, **kwargs): # real signature unknown
    pass

def is_empty_tuple(*args, **kwargs): # real signature unknown
    pass

def is_fstring(*args, **kwargs): # real signature unknown
    pass

def is_function_or_class(*args, **kwargs): # real signature unknown
    pass

def is_import(*args, **kwargs): # real signature unknown
    pass

def is_lpar_token(*args, **kwargs): # real signature unknown
    pass

def is_multiline_string(*args, **kwargs): # real signature unknown
    pass

def is_name_token(*args, **kwargs): # real signature unknown
    pass

def is_number_token(*args, **kwargs): # real signature unknown
    pass

def is_one_sequence_between(*args, **kwargs): # real signature unknown
    pass

def is_one_tuple(*args, **kwargs): # real signature unknown
    pass

def is_parent_function_or_class(*args, **kwargs): # real signature unknown
    pass

def is_part_of_annotation(*args, **kwargs): # real signature unknown
    pass

def is_rpar_token(*args, **kwargs): # real signature unknown
    pass

def is_simple_decorator_expression(*args, **kwargs): # real signature unknown
    pass

def is_simple_decorator_trailer(*args, **kwargs): # real signature unknown
    pass

def is_stub_body(*args, **kwargs): # real signature unknown
    pass

def is_stub_suite(*args, **kwargs): # real signature unknown
    pass

def is_tuple_containing_walrus(*args, **kwargs): # real signature unknown
    pass

def is_type_comment(*args, **kwargs): # real signature unknown
    pass

def is_type_ignore_comment(*args, **kwargs): # real signature unknown
    pass

def is_type_ignore_comment_string(*args, **kwargs): # real signature unknown
    pass

def is_vararg(*args, **kwargs): # real signature unknown
    pass

def is_walrus_assignment(*args, **kwargs): # real signature unknown
    pass

def is_with_or_async_with_stmt(*args, **kwargs): # real signature unknown
    pass

def is_yield(*args, **kwargs): # real signature unknown
    pass

def Iterator(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Iterator. """
    pass

def last_leaf(*args, **kwargs): # real signature unknown
    pass

def List(*args, **kwargs): # real signature unknown
    """ A generic version of list. """
    pass

def Literal(*args, **kwargs): # real signature unknown
    """
    Special typing form to define literal types (a.k.a. value types).
    
        This form can be used to indicate to type checkers that the corresponding
        variable or function parameter has a value equivalent to the provided
        literal (or one of several literals)::
    
            def validate_simple(data: Any) -> Literal[True]:  # always returns True
                ...
    
            MODE = Literal['r', 'rb', 'w', 'wb']
            def open_helper(file: str, mode: MODE) -> str:
                ...
    
            open_helper('/some/path', 'r')  # Passes type check
            open_helper('/other/path', 'typo')  # Error in type checker
    
        Literal[...] cannot be subclassed. At runtime, an arbitrary value
        is allowed as type argument to Literal[...], but type checkers may
        impose restrictions.
    """
    pass

def LN(*args, **kwargs): # real signature unknown
    pass

def make_simple_prefix(*args, **kwargs): # real signature unknown
    pass

def mypyc_attr(*attrs, **kwattrs): # reliably restored by inspect
    # no doc
    pass

def NL(*args, **kwargs): # real signature unknown
    pass

def Optional(*args, **kwargs): # real signature unknown
    """ Optional[X] is equivalent to Union[X, None]. """
    pass

def parent_type(*args, **kwargs): # real signature unknown
    pass

def preceding_leaf(*args, **kwargs): # real signature unknown
    pass

def prev_siblings_are(*args, **kwargs): # real signature unknown
    pass

def replace_child(*args, **kwargs): # real signature unknown
    pass

def Set(*args, **kwargs): # real signature unknown
    """ A generic version of set. """
    pass

def Tuple(*args, **kwargs): # real signature unknown
    """
    Deprecated alias to builtins.tuple.
    
        Tuple[X, Y] is the cross-product type of X and Y.
    
        Example: Tuple[T1, T2] is a tuple of two elements corresponding
        to type variables T1 and T2.  Tuple[int, float, str] is a tuple
        of an int, a float and a string.
    
        To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
    """
    pass

def TypeGuard(*args, **kwargs): # real signature unknown
    """
    Special typing construct for marking user-defined type guard functions.
    
        ``TypeGuard`` can be used to annotate the return type of a user-defined
        type guard function.  ``TypeGuard`` only accepts a single type argument.
        At runtime, functions marked this way should return a boolean.
    
        ``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static
        type checkers to determine a more precise type of an expression within a
        program's code flow.  Usually type narrowing is done by analyzing
        conditional code flow and applying the narrowing to a block of code.  The
        conditional expression here is sometimes referred to as a "type guard".
    
        Sometimes it would be convenient to use a user-defined boolean function
        as a type guard.  Such a function should use ``TypeGuard[...]`` as its
        return type to alert static type checkers to this intention.
    
        Using  ``-> TypeGuard`` tells the static type checker that for a given
        function:
    
        1. The return value is a boolean.
        2. If the return value is ``True``, the type of its argument
           is the type inside ``TypeGuard``.
    
           For example::
    
               def is_str(val: Union[str, float]):
                   # "isinstance" type guard
                   if isinstance(val, str):
                       # Type of ``val`` is narrowed to ``str``
                       ...
                   else:
                       # Else, type of ``val`` is narrowed to ``float``.
                       ...
    
        Strict type narrowing is not enforced -- ``TypeB`` need not be a narrower
        form of ``TypeA`` (it can even be a wider form) and this may lead to
        type-unsafe results.  The main reason is to allow for things like
        narrowing ``List[object]`` to ``List[str]`` even though the latter is not
        a subtype of the former, since ``List`` is invariant.  The responsibility of
        writing type-safe type guards is left to the user.
    
        ``TypeGuard`` also works with type variables.  For more information, see
        PEP 647 (User-Defined Type Guards).
    """
    pass

def Union(*args, **kwargs): # real signature unknown
    """
    Union type; Union[X, Y] means either X or Y.
    
        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].
    
        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::
    
            assert Union[Union[int, str], float] == Union[int, str, float]
    
        - Unions of a single argument vanish, e.g.::
    
            assert Union[int] == int  # The constructor actually returns int
    
        - Redundant arguments are skipped, e.g.::
    
            assert Union[int, str, int] == Union[int, str]
    
        - When comparing unions, the argument order is ignored, e.g.::
    
            assert Union[int, str] == Union[str, int]
    
        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].
    """
    pass

def unwrap_singleton_parenthesis(*args, **kwargs): # real signature unknown
    pass

def whitespace(*args, **kwargs): # real signature unknown
    pass

def wrap_in_parentheses(*args, **kwargs): # real signature unknown
    pass

# classes

class Generic(object):
    """
    Abstract base class for generic types.
    
        A generic type is typically declared by inheriting from
        this class parameterized with one or more type variables.
        For example, a generic mapping type might be defined as::
    
          class Mapping(Generic[KT, VT]):
              def __getitem__(self, key: KT) -> VT:
                  ...
              # Etc.
    
        This class can then be used as follows::
    
          def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
              try:
                  return mapping[key]
              except KeyError:
                  return default
    """
    @classmethod
    def __class_getitem__(cls, *args, **kwargs): # real signature unknown
        """
        Parameterizes a generic class.
        
                At least, parameterizing a generic class is the *main* thing this method
                does. For example, for some generic class `Foo`, this is called when we
                do `Foo[int]` - there, with `cls=Foo` and `params=int`.
        
                However, note that this method is also called when defining generic
                classes in the first place with `class Foo(Generic[T]): ...`.
        """
        pass

    @classmethod
    def __init_subclass__(cls, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    _is_protocol = False
    __slots__ = ()


class NodeType(object):
    """
    int([x]) -> integer
    int(x, base=10) -> integer
    
    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.
    
    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
    """
    def as_integer_ratio(self): # real signature unknown; restored from __doc__
        """
        Return integer ratio.
        
        Return a pair of integers, whose ratio is exactly equal to the original int
        and with a positive denominator.
        
        >>> (10).as_integer_ratio()
        (10, 1)
        >>> (-10).as_integer_ratio()
        (-10, 1)
        >>> (0).as_integer_ratio()
        (0, 1)
        """
        pass

    def bit_count(self): # real signature unknown; restored from __doc__
        """
        Number of ones in the binary representation of the absolute value of self.
        
        Also known as the population count.
        
        >>> bin(13)
        '0b1101'
        >>> (13).bit_count()
        3
        """
        pass

    def bit_length(self): # real signature unknown; restored from __doc__
        """
        Number of bits necessary to represent self in binary.
        
        >>> bin(37)
        '0b100101'
        >>> (37).bit_length()
        6
        """
        pass

    def conjugate(self, *args, **kwargs): # real signature unknown
        """ Returns self, the complex conjugate of any int. """
        pass

    @classmethod
    def from_bytes(cls, *args, **kwargs): # real signature unknown
        """
        Return the integer represented by the given array of bytes.
        
          bytes
            Holds the array of bytes to convert.  The argument must either
            support the buffer protocol or be an iterable object producing bytes.
            Bytes and bytearray are examples of built-in objects that support the
            buffer protocol.
          byteorder
            The byte order used to represent the integer.  If byteorder is 'big',
            the most significant byte is at the beginning of the byte array.  If
            byteorder is 'little', the most significant byte is at the end of the
            byte array.  To request the native byte order of the host system, use
            `sys.byteorder' as the byte order value.  Default is to use 'big'.
          signed
            Indicates whether two's complement is used to represent the integer.
        """
        pass

    def to_bytes(self, *args, **kwargs): # real signature unknown
        """
        Return an array of bytes representing an integer.
        
          length
            Length of bytes object to use.  An OverflowError is raised if the
            integer is not representable with the given number of bytes.  Default
            is length 1.
          byteorder
            The byte order used to represent the integer.  If byteorder is 'big',
            the most significant byte is at the beginning of the byte array.  If
            byteorder is 'little', the most significant byte is at the end of the
            byte array.  To request the native byte order of the host system, use
            `sys.byteorder' as the byte order value.  Default is to use 'big'.
          signed
            Determines whether two's complement is used to represent the integer.
            If signed is False and a negative integer is given, an OverflowError
            is raised.
        """
        pass

    def __abs__(self, *args, **kwargs): # real signature unknown
        """ abs(self) """
        pass

    def __add__(self, *args, **kwargs): # real signature unknown
        """ Return self+value. """
        pass

    def __and__(self, *args, **kwargs): # real signature unknown
        """ Return self&value. """
        pass

    def __bool__(self, *args, **kwargs): # real signature unknown
        """ True if self else False """
        pass

    def __ceil__(self, *args, **kwargs): # real signature unknown
        """ Ceiling of an Integral returns itself. """
        pass

    def __divmod__(self, *args, **kwargs): # real signature unknown
        """ Return divmod(self, value). """
        pass

    def __eq__(self, *args, **kwargs): # real signature unknown
        """ Return self==value. """
        pass

    def __float__(self, *args, **kwargs): # real signature unknown
        """ float(self) """
        pass

    def __floordiv__(self, *args, **kwargs): # real signature unknown
        """ Return self//value. """
        pass

    def __floor__(self, *args, **kwargs): # real signature unknown
        """ Flooring an Integral returns itself. """
        pass

    def __format__(self, *args, **kwargs): # real signature unknown
        pass

    def __getattribute__(self, *args, **kwargs): # real signature unknown
        """ Return getattr(self, name). """
        pass

    def __getnewargs__(self, *args, **kwargs): # real signature unknown
        pass

    def __ge__(self, *args, **kwargs): # real signature unknown
        """ Return self>=value. """
        pass

    def __gt__(self, *args, **kwargs): # real signature unknown
        """ Return self>value. """
        pass

    def __hash__(self, *args, **kwargs): # real signature unknown
        """ Return hash(self). """
        pass

    def __index__(self, *args, **kwargs): # real signature unknown
        """ Return self converted to an integer, if self is suitable for use as an index into a list. """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __int__(self, *args, **kwargs): # real signature unknown
        """ int(self) """
        pass

    def __invert__(self, *args, **kwargs): # real signature unknown
        """ ~self """
        pass

    def __le__(self, *args, **kwargs): # real signature unknown
        """ Return self<=value. """
        pass

    def __lshift__(self, *args, **kwargs): # real signature unknown
        """ Return self<<value. """
        pass

    def __lt__(self, *args, **kwargs): # real signature unknown
        """ Return self<value. """
        pass

    def __mod__(self, *args, **kwargs): # real signature unknown
        """ Return self%value. """
        pass

    def __mul__(self, *args, **kwargs): # real signature unknown
        """ Return self*value. """
        pass

    def __neg__(self, *args, **kwargs): # real signature unknown
        """ -self """
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __ne__(self, *args, **kwargs): # real signature unknown
        """ Return self!=value. """
        pass

    def __or__(self, *args, **kwargs): # real signature unknown
        """ Return self|value. """
        pass

    def __pos__(self, *args, **kwargs): # real signature unknown
        """ +self """
        pass

    def __pow__(self, *args, **kwargs): # real signature unknown
        """ Return pow(self, value, mod). """
        pass

    def __radd__(self, *args, **kwargs): # real signature unknown
        """ Return value+self. """
        pass

    def __rand__(self, *args, **kwargs): # real signature unknown
        """ Return value&self. """
        pass

    def __rdivmod__(self, *args, **kwargs): # real signature unknown
        """ Return divmod(value, self). """
        pass

    def __repr__(self, *args, **kwargs): # real signature unknown
        """ Return repr(self). """
        pass

    def __rfloordiv__(self, *args, **kwargs): # real signature unknown
        """ Return value//self. """
        pass

    def __rlshift__(self, *args, **kwargs): # real signature unknown
        """ Return value<<self. """
        pass

    def __rmod__(self, *args, **kwargs): # real signature unknown
        """ Return value%self. """
        pass

    def __rmul__(self, *args, **kwargs): # real signature unknown
        """ Return value*self. """
        pass

    def __ror__(self, *args, **kwargs): # real signature unknown
        """ Return value|self. """
        pass

    def __round__(self, *args, **kwargs): # real signature unknown
        """
        Rounding an Integral returns itself.
        
        Rounding with an ndigits argument also returns an integer.
        """
        pass

    def __rpow__(self, *args, **kwargs): # real signature unknown
        """ Return pow(value, self, mod). """
        pass

    def __rrshift__(self, *args, **kwargs): # real signature unknown
        """ Return value>>self. """
        pass

    def __rshift__(self, *args, **kwargs): # real signature unknown
        """ Return self>>value. """
        pass

    def __rsub__(self, *args, **kwargs): # real signature unknown
        """ Return value-self. """
        pass

    def __rtruediv__(self, *args, **kwargs): # real signature unknown
        """ Return value/self. """
        pass

    def __rxor__(self, *args, **kwargs): # real signature unknown
        """ Return value^self. """
        pass

    def __sizeof__(self, *args, **kwargs): # real signature unknown
        """ Returns size in memory, in bytes. """
        pass

    def __sub__(self, *args, **kwargs): # real signature unknown
        """ Return self-value. """
        pass

    def __truediv__(self, *args, **kwargs): # real signature unknown
        """ Return self/value. """
        pass

    def __trunc__(self, *args, **kwargs): # real signature unknown
        """ Truncating an Integral returns itself. """
        pass

    def __xor__(self, *args, **kwargs): # real signature unknown
        """ Return self^value. """
        pass

    denominator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the denominator of a rational number in lowest terms"""

    imag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the imaginary part of a complex number"""

    numerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the numerator of a rational number in lowest terms"""

    real = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the real part of a complex number"""



LeafID = NodeType


class TypeVar(__typing._Final, __typing._Immutable, __typing._BoundVarianceMixin, __typing._PickleUsingNameMixin):
    """
    Type variable.
    
        Usage::
    
          T = TypeVar('T')  # Can be anything
          A = TypeVar('A', str, bytes)  # Must be str or bytes
    
        Type variables exist primarily for the benefit of static type
        checkers.  They serve as the parameters for generic types as well
        as for generic function definitions.  See class Generic for more
        information on generic types.  Generic functions work as follows:
    
          def repeat(x: T, n: int) -> List[T]:
              '''Return a list containing n references to x.'''
              return [x]*n
    
          def longest(x: A, y: A) -> A:
              '''Return the longest of two strings.'''
              return x if len(x) >= len(y) else y
    
        The latter example's signature is essentially the overloading
        of (str, str) -> str and (bytes, bytes) -> bytes.  Also note
        that if the arguments are instances of some subclass of str,
        the return type is still plain str.
    
        At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.
    
        Type variables defined with covariant=True or contravariant=True
        can be used to declare covariant or contravariant generic types.
        See PEP 484 for more details. By default generic types are invariant
        in all type variables.
    
        Type variables can be introspected. e.g.:
    
          T.__name__ == 'T'
          T.__constraints__ == ()
          T.__covariant__ == False
          T.__contravariant__ = False
          A.__constraints__ == (str, bytes)
    
        Note that only type variables defined in global scope can be pickled.
    """
    def __init__(self, name, *constraints, bound=None, covariant=False, contravariant=False): # reliably restored by inspect
        # no doc
        pass

    def __typing_subst__(self, arg): # reliably restored by inspect
        # no doc
        pass

    __dict__ = None # (!) real value is 'mappingproxy({\'__module__\': \'typing\', \'__doc__\': "Type variable.\\n\\n    Usage::\\n\\n      T = TypeVar(\'T\')  # Can be anything\\n      A = TypeVar(\'A\', str, bytes)  # Must be str or bytes\\n\\n    Type variables exist primarily for the benefit of static type\\n    checkers.  They serve as the parameters for generic types as well\\n    as for generic function definitions.  See class Generic for more\\n    information on generic types.  Generic functions work as follows:\\n\\n      def repeat(x: T, n: int) -> List[T]:\\n          \'\'\'Return a list containing n references to x.\'\'\'\\n          return [x]*n\\n\\n      def longest(x: A, y: A) -> A:\\n          \'\'\'Return the longest of two strings.\'\'\'\\n          return x if len(x) >= len(y) else y\\n\\n    The latter example\'s signature is essentially the overloading\\n    of (str, str) -> str and (bytes, bytes) -> bytes.  Also note\\n    that if the arguments are instances of some subclass of str,\\n    the return type is still plain str.\\n\\n    At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.\\n\\n    Type variables defined with covariant=True or contravariant=True\\n    can be used to declare covariant or contravariant generic types.\\n    See PEP 484 for more details. By default generic types are invariant\\n    in all type variables.\\n\\n    Type variables can be introspected. e.g.:\\n\\n      T.__name__ == \'T\'\\n      T.__constraints__ == ()\\n      T.__covariant__ == False\\n      T.__contravariant__ = False\\n      A.__constraints__ == (str, bytes)\\n\\n    Note that only type variables defined in global scope can be pickled.\\n    ", \'__init__\': <function TypeVar.__init__ at 0x000002606F2A82C0>, \'__typing_subst__\': <function TypeVar.__typing_subst__ at 0x000002606F2A8360>, \'__dict__\': <attribute \'__dict__\' of \'TypeVar\' objects>})'


class Visitor(__typing.Generic):
    # no doc
    def visit(self, *args, **kwargs): # real signature unknown
        pass

    def visit_default(self, *args, **kwargs): # real signature unknown
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __dict__ = None # (!) real value is "mappingproxy({'__orig_bases__': (typing.Generic[~T],), '__new__': <built-in method __new__ of type object at 0x000002606F4AADC0>, 'visit': <method 'visit' of 'Visitor' objects>, 'visit_default': <method 'visit_default' of 'Visitor' objects>, '__setstate__': <method '__setstate__' of 'Visitor' objects>, '__getstate__': <method '__getstate__' of 'Visitor' objects>, '__dict__': <member '__dict__' of 'Visitor' objects>, '__weakref__': <member '__weakref__' of 'Visitor' objects>, '__doc__': None, '__module__': 'black.nodes', '__parameters__': (~T,), '__mypyc_attrs__': ('__dict__',)})"
    __mypyc_attrs__ = (
        '__dict__',
    )
    __orig_bases__ = (
        typing.Generic[~T],
    )
    __parameters__ = (
        None, # (!) forward: T, real value is '~T'
    )


# variables with complex values

ALWAYS_NO_SPACE = None # (!) real value is '{8, 10, 12, 153, 27, 61, 62, 63}'

ASSIGNMENTS = None # (!) real value is "{'<<=', '^=', '%=', '=', '>>=', '**=', '&=', '@=', '-=', '+=', '|=', ':', '*=', '//=', '/='}"

BRACKET = {
    7: 8,
    9: 10,
    26: 27,
}

BRACKETS = None # (!) real value is '{10, 7, 8, 9, 26, 27}'

CACHE_DIR = None # (!) real value is "WindowsPath('C:/Users/kosta/AppData/Local/black/black/Cache/24.8.0')"

CLOSING_BRACKETS = None # (!) real value is '{8, 10, 27}'

COMPARATORS = None # (!) real value is '{20, 21, 28, 29, 30, 31}'

IMPLICIT_TUPLE = None # (!) real value is '{345, 292, 341}'

LOGIC_OPERATORS = None # (!) real value is "{'or', 'and'}"

MATH_OPERATORS = None # (!) real value is '{32, 33, 34, 35, 36, 14, 15, 16, 17, 18, 19, 48, 50, 24}'

OPENING_BRACKETS = None # (!) real value is '{9, 26, 7}'

STARS = None # (!) real value is '{16, 36}'

STATEMENT = None # (!) real value is '{289, 295, 362, 363, 300, 270, 303, 271, 311, 351}'

T = None # (!) real value is '~T'

TEST_DESCENDANTS = None # (!) real value is '{257, 258, 290, 325, 262, 328, 364, 333, 339, 340, 309, 276, 312, 313, 350, 319}'

TYPED_NAMES = None # (!) real value is '{348, 349}'

UNPACKING_PARENTS = None # (!) real value is '{323, 267, 335, 310, 343, 345, 283}'

VARARGS_PARENTS = None # (!) real value is '{353, 260, 261, 358, 350}'

VARARGS_SPECIALS = None # (!) real value is '{16, 17, 36}'

WHITESPACE = None # (!) real value is '{4, 5, 6}'

__loader__ = None # (!) real value is '<_frozen_importlib_external.ExtensionFileLoader object at 0x000002607107BC50>'

__spec__ = None # (!) real value is "ModuleSpec(name='black.nodes', loader=<_frozen_importlib_external.ExtensionFileLoader object at 0x000002607107BC50>, origin='C:\\\\Users\\\\kosta\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\Lib\\\\site-packages\\\\black\\\\nodes.cp311-win_amd64.pyd')"

