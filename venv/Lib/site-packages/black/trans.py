# encoding: utf-8
# module black.trans
# from C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\trans.cp311-win_amd64.pyd
# by generator 1.147
# no doc

# imports
import re as re # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\re\__init__.py
import blib2to3.pgen2.token as token # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\blib2to3\pgen2\token.cp311-win_amd64.pyd
from black.comments import contains_pragma_comment

from black.lines import Line, append_leaves

from black.mode import Feature, Mode, Preview

from black.nodes import (is_empty_lpar, is_empty_par, is_empty_rpar, 
    is_part_of_annotation, parent_type, replace_child)

from black.rusty import Err, Ok

from black.strings import (assert_is_leaf_string, count_chars_in_width, 
    get_string_prefix, has_triple_quotes, normalize_string_quotes, str_width)

from blib2to3.pygram import syms

from blib2to3.pytree import Leaf, Node

import abc as __abc
import typing as __typing


# Variables with simple values

STANDALONE_COMMENT = 153

# functions

def abstractmethod(funcobj): # reliably restored by inspect
    """
    A decorator indicating abstract methods.
    
        Requires that the metaclass is ABCMeta or derived from it.  A
        class that has a metaclass derived from ABCMeta cannot be
        instantiated unless all of its abstract methods are overridden.
        The abstract methods can be called using any of the normal
        'super' call mechanisms.  abstractmethod() may be used to declare
        abstract methods for properties and descriptors.
    
        Usage:
    
            class C(metaclass=ABCMeta):
                @abstractmethod
                def my_abstract_method(self, arg1, arg2, argN):
                    ...
    """
    pass

def Callable(*args, **kwargs): # real signature unknown
    """
    Deprecated alias to collections.abc.Callable.
    
        Callable[[int], str] signifies a function of (int) -> str.
        The subscription syntax must always be used with exactly two
        values: the argument list and the return type.
        The argument list must be a list of types, a ParamSpec or ellipsis.
        The return type must be a single type.
    
        There is no syntax to indicate optional or keyword arguments;
        such function types are rarely used as callback types.
    """
    pass

def ClassVar(*args, **kwargs): # real signature unknown
    """
    Special type construct to mark class variables.
    
        An annotation wrapped in ClassVar indicates that a given
        attribute is intended to be used as a class variable and
        should not be set on instances of that class. Usage::
    
            class Starship:
                stats: ClassVar[Dict[str, int]] = {} # class variable
                damage: int = 10                     # instance variable
    
        ClassVar accepts only types and cannot be further subscribed.
    
        Note that ClassVar is not a class itself, and should not
        be used with isinstance() or issubclass().
    """
    pass

def Collection(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Collection. """
    pass

def dataclass(cls=None, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False): # reliably restored by inspect
    """
    Add dunder methods based on the fields defined in the class.
    
        Examines PEP 526 __annotations__ to determine fields.
    
        If init is true, an __init__() method is added to the class. If repr
        is true, a __repr__() method is added. If order is true, rich
        comparison dunder methods are added. If unsafe_hash is true, a
        __hash__() method is added. If frozen is true, fields may not be
        assigned to after instance creation. If match_args is true, the
        __match_args__ tuple is added. If kw_only is true, then by default
        all fields are keyword-only. If slots is true, a new class with a
        __slots__ attribute is returned.
    """
    pass

def Dict(*args, **kwargs): # real signature unknown
    """ A generic version of dict. """
    pass

def Final(*args, **kwargs): # real signature unknown
    """
    Special typing construct to indicate final names to type checkers.
    
        A final name cannot be re-assigned or overridden in a subclass.
    
        For example::
    
            MAX_SIZE: Final = 9000
            MAX_SIZE += 1  # Error reported by type checker
    
            class Connection:
                TIMEOUT: Final[int] = 10
    
            class FastConnector(Connection):
                TIMEOUT = 1  # Error reported by type checker
    
        There is no runtime checking of these properties.
    """
    pass

def fstring_contains_expr(*args, **kwargs): # real signature unknown
    pass

def handle_is_simple_lookup_forward(*args, **kwargs): # real signature unknown
    pass

def handle_is_simple_look_up_prev(*args, **kwargs): # real signature unknown
    pass

def hug_power_op(*args, **kwargs): # real signature unknown
    pass

def insert_str_child_factory(*args, **kwargs): # real signature unknown
    pass

def is_expression_chained(*args, **kwargs): # real signature unknown
    pass

def is_valid_index_factory(*args, **kwargs): # real signature unknown
    pass

def Iterable(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Iterable. """
    pass

def Iterator(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Iterator. """
    pass

def iter_fexpr_spans(*args, **kwargs): # real signature unknown
    pass

def List(*args, **kwargs): # real signature unknown
    """ A generic version of list. """
    pass

def Literal(*args, **kwargs): # real signature unknown
    """
    Special typing form to define literal types (a.k.a. value types).
    
        This form can be used to indicate to type checkers that the corresponding
        variable or function parameter has a value equivalent to the provided
        literal (or one of several literals)::
    
            def validate_simple(data: Any) -> Literal[True]:  # always returns True
                ...
    
            MODE = Literal['r', 'rb', 'w', 'wb']
            def open_helper(file: str, mode: MODE) -> str:
                ...
    
            open_helper('/some/path', 'r')  # Passes type check
            open_helper('/other/path', 'typo')  # Error in type checker
    
        Literal[...] cannot be subclassed. At runtime, an arbitrary value
        is allowed as type argument to Literal[...], but type checkers may
        impose restrictions.
    """
    pass

def LN(*args, **kwargs): # real signature unknown
    pass

def Optional(*args, **kwargs): # real signature unknown
    """ Optional[X] is equivalent to Union[X, None]. """
    pass

def original_is_simple_lookup_func(*args, **kwargs): # real signature unknown
    pass

def Result(*args, **kwargs): # real signature unknown
    pass

def Sequence(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Sequence. """
    pass

def Set(*args, **kwargs): # real signature unknown
    """ A generic version of set. """
    pass

def TErr(*args, **kwargs): # real signature unknown
    pass

def TMatchResult(*args, **kwargs): # real signature unknown
    pass

def trait(cls): # reliably restored by inspect
    # no doc
    pass

def Transformer(*args, **kwargs): # real signature unknown
    pass

def TResult(*args, **kwargs): # real signature unknown
    pass

def Tuple(*args, **kwargs): # real signature unknown
    """
    Deprecated alias to builtins.tuple.
    
        Tuple[X, Y] is the cross-product type of X and Y.
    
        Example: Tuple[T1, T2] is a tuple of two elements corresponding
        to type variables T1 and T2.  Tuple[int, float, str] is a tuple
        of an int, a float and a string.
    
        To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
    """
    pass

def Union(*args, **kwargs): # real signature unknown
    """
    Union type; Union[X, Y] means either X or Y.
    
        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].
    
        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::
    
            assert Union[Union[int, str], float] == Union[int, str, float]
    
        - Unions of a single argument vanish, e.g.::
    
            assert Union[int] == int  # The constructor actually returns int
    
        - Redundant arguments are skipped, e.g.::
    
            assert Union[int, str, int] == Union[int, str]
    
        - When comparing unions, the argument order is ignored, e.g.::
    
            assert Union[int, str] == Union[str, int]
    
        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].
    """
    pass

def _toggle_fexpr_quotes(*args, **kwargs): # real signature unknown
    pass

# classes

class ABC(object):
    """
    Helper class that provides a standard way to create an ABC using
        inheritance.
    """
    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    _abc_impl = None # (!) real value is '<_abc._abc_data object at 0x00000193C9BF5440>'
    __abstractmethods__ = frozenset()
    __slots__ = ()


class Any(object):
    """
    Special type indicating an unconstrained type.
    
        - Any is compatible with every type.
        - Any assumed to have all methods.
        - All values assumed to be instances of Any.
    
        Note that all the above statements are true from the point of view of
        static type checkers. At runtime, Any should not be used with instance
        checks.
    """
    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(cls, *args, **kwargs): # reliably restored by inspect
        # no doc
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """list of weak references to the object (if defined)"""


    __dict__ = None # (!) real value is "mappingproxy({'__module__': 'typing', '__doc__': 'Special type indicating an unconstrained type.\\n\\n    - Any is compatible with every type.\\n    - Any assumed to have all methods.\\n    - All values assumed to be instances of Any.\\n\\n    Note that all the above statements are true from the point of view of\\n    static type checkers. At runtime, Any should not be used with instance\\n    checks.\\n    ', '__new__': <staticmethod(<function Any.__new__ at 0x00000193CA437060>)>, '__dict__': <attribute '__dict__' of 'Any' objects>, '__weakref__': <attribute '__weakref__' of 'Any' objects>})"


class StringTransformer(__abc.ABC):
    # no doc
    def do_match(self, *args, **kwargs): # real signature unknown
        pass

    def do_transform(self, *args, **kwargs): # real signature unknown
        pass

    def __call__(self, *args, **kwargs): # real signature unknown
        """ Call self as a function. """
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __mypyc_defaults_setup(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    line_length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    normalize_strings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __dict__ = None # (!) real value is "mappingproxy({'__new__': <built-in method __new__ of ABCMeta object at 0x00000193CA8897B0>, '__call__': <slot wrapper '__call__' of 'StringTransformer' objects>, '__init__': <slot wrapper '__init__' of 'StringTransformer' objects>, 'do_match': <method 'do_match' of 'StringTransformer' objects>, 'do_transform': <method 'do_transform' of 'StringTransformer' objects>, '__mypyc_defaults_setup': <method '__mypyc_defaults_setup' of 'StringTransformer' objects>, '__setstate__': <method '__setstate__' of 'StringTransformer' objects>, '__getstate__': <method '__getstate__' of 'StringTransformer' objects>, '__dict__': <member '__dict__' of 'StringTransformer' objects>, '__weakref__': <member '__weakref__' of 'StringTransformer' objects>, '__name__': <attribute '__name__' of 'StringTransformer' objects>, 'line_length': <attribute 'line_length' of 'StringTransformer' objects>, 'normalize_strings': <attribute 'normalize_strings' of 'StringTransformer' objects>, '__doc__': None, '__module__': 'black.trans', '__mypyc_attrs__': ('__name__', 'line_length', 'normalize_strings', '__dict__')})"
    __mypyc_attrs__ = (
        '__name__',
        'line_length',
        'normalize_strings',
        '__dict__',
    )
    __name__ = 'StringTransformer'


class BaseStringSplitter(StringTransformer):
    # no doc
    def do_match(self, *args, **kwargs): # real signature unknown
        pass

    def do_splitter_match(self, *args, **kwargs): # real signature unknown
        pass

    def _get_max_string_length(self, *args, **kwargs): # real signature unknown
        pass

    def _prefer_paren_wrap_match(self, *args, **kwargs): # real signature unknown
        pass

    def _validate(self, *args, **kwargs): # real signature unknown
        pass

    def __call__(self, *args, **kwargs): # real signature unknown
        """ Call self as a function. """
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __mypyc_defaults_setup(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    STRING_OPERATORS = [
        28,
        21,
        31,
        20,
        30,
        29,
        24,
        14,
        16,
    ]
    __dict__ = None # (!) real value is "mappingproxy({'__new__': <built-in method __new__ of ABCMeta object at 0x00000193CA88AAC0>, '__call__': <slot wrapper '__call__' of 'BaseStringSplitter' objects>, 'do_splitter_match': <method 'do_splitter_match' of 'BaseStringSplitter' objects>, 'do_match': <method 'do_match' of 'BaseStringSplitter' objects>, '_validate': <method '_validate' of 'BaseStringSplitter' objects>, '_get_max_string_length': <method '_get_max_string_length' of 'BaseStringSplitter' objects>, '_prefer_paren_wrap_match': <staticmethod(<built-in method _prefer_paren_wrap_match of ABCMeta object at 0x00000193CA88AAC0>)>, '__mypyc_defaults_setup': <method '__mypyc_defaults_setup' of 'BaseStringSplitter' objects>, '__setstate__': <method '__setstate__' of 'BaseStringSplitter' objects>, '__getstate__': <method '__getstate__' of 'BaseStringSplitter' objects>, '__dict__': <member '__dict__' of 'BaseStringSplitter' objects>, '__weakref__': <member '__weakref__' of 'BaseStringSplitter' objects>, 'STRING_OPERATORS': [28, 21, 31, 20, 30, 29, 24, 14, 16], '__doc__': None, '__module__': 'black.trans', '__mypyc_attrs__': ('STRING_OPERATORS', '__name__', 'line_length', 'normalize_strings', '__dict__')})"
    __mypyc_attrs__ = (
        'STRING_OPERATORS',
        '__name__',
        'line_length',
        'normalize_strings',
        '__dict__',
    )


class CannotTransform(Exception):
    # no doc
    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __dict__ = None # (!) real value is "mappingproxy({'__setstate__': <method '__setstate__' of 'CannotTransform' objects>, '__getstate__': <method '__getstate__' of 'CannotTransform' objects>, '__dict__': <member '__dict__' of 'CannotTransform' objects>, '__weakref__': <member '__weakref__' of 'CannotTransform' objects>, '__doc__': None, '__module__': 'black.trans', '__mypyc_attrs__': ('__dict__',)})"
    __mypyc_attrs__ = (
        '__dict__',
    )


class CustomSplit(object):
    # no doc
    def __eq__(self, other): # reliably restored by inspect
        # no doc
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, has_prefix, break_idx): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __repr__(self): # reliably restored by inspect
        # no doc
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    break_idx = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    has_prefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __annotations__ = {
        'break_idx': int,
        'has_prefix': bool,
    }
    __dataclass_fields__ = {
        'break_idx': None, # (!) real value is "Field(name='break_idx',type=<class 'int'>,default=<dataclasses._MISSING_TYPE object at 0x00000193CC2847D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x00000193CC2847D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'has_prefix': None, # (!) real value is "Field(name='has_prefix',type=<class 'bool'>,default=<dataclasses._MISSING_TYPE object at 0x00000193CC2847D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x00000193CC2847D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
    }
    __dataclass_params__ = _DataclassParams(init=True,repr=True,eq=True,order=False,unsafe_hash=False,frozen=False)
    __hash__ = None
    __match_args__ = (
        'has_prefix',
        'break_idx',
    )
    __mypyc_attrs__ = (
        'has_prefix',
        'break_idx',
    )


class CustomSplitMapMixin(object):
    # no doc
    def add_custom_splits(self, *args, **kwargs): # real signature unknown
        pass

    def has_custom_splits(self, *args, **kwargs): # real signature unknown
        pass

    def pop_custom_splits(self, *args, **kwargs): # real signature unknown
        pass

    def _get_key(self, *args, **kwargs): # real signature unknown
        pass

    def _Key(self, *args, **kwargs): # real signature unknown
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    _CUSTOM_SPLIT_MAP = defaultdict(<class 'tuple'>, {})
    __mypyc_attrs__ = ()


class defaultdict(dict):
    """
    defaultdict(default_factory=None, /, [...]) --> dict with default factory
    
    The default factory is called without arguments to produce
    a new value when a key is not present, in __getitem__ only.
    A defaultdict compares equal to a dict with the same items.
    All remaining arguments are treated the same as if they were
    passed to the dict constructor, including keyword arguments.
    """
    def copy(self): # real signature unknown; restored from __doc__
        """ D.copy() -> a shallow copy of D. """
        pass

    @classmethod
    def __class_getitem__(cls, *args, **kwargs): # real signature unknown
        """ See PEP 585 """
        pass

    def __copy__(self, *args, **kwargs): # real signature unknown
        """ D.copy() -> a shallow copy of D. """
        pass

    def __getattribute__(self, *args, **kwargs): # real signature unknown
        """ Return getattr(self, name). """
        pass

    def __init__(self, default_factory=None, *args, **kwargs): # real signature unknown; NOTE: unreliably restored from __doc__ 
        pass

    def __missing__(self, key): # real signature unknown; restored from __doc__
        """
        __missing__(key) # Called by __getitem__ for missing key; pseudo-code:
          if self.default_factory is None: raise KeyError((key,))
          self[key] = value = self.default_factory()
          return value
        """
        pass

    def __or__(self, *args, **kwargs): # real signature unknown
        """ Return self|value. """
        pass

    def __reduce__(self, *args, **kwargs): # real signature unknown
        """ Return state information for pickling. """
        pass

    def __repr__(self, *args, **kwargs): # real signature unknown
        """ Return repr(self). """
        pass

    def __ror__(self, *args, **kwargs): # real signature unknown
        """ Return value|self. """
        pass

    default_factory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Factory for default value called by __missing__()."""



class StringID(object):
    """
    int([x]) -> integer
    int(x, base=10) -> integer
    
    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.
    
    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
    """
    def as_integer_ratio(self): # real signature unknown; restored from __doc__
        """
        Return integer ratio.
        
        Return a pair of integers, whose ratio is exactly equal to the original int
        and with a positive denominator.
        
        >>> (10).as_integer_ratio()
        (10, 1)
        >>> (-10).as_integer_ratio()
        (-10, 1)
        >>> (0).as_integer_ratio()
        (0, 1)
        """
        pass

    def bit_count(self): # real signature unknown; restored from __doc__
        """
        Number of ones in the binary representation of the absolute value of self.
        
        Also known as the population count.
        
        >>> bin(13)
        '0b1101'
        >>> (13).bit_count()
        3
        """
        pass

    def bit_length(self): # real signature unknown; restored from __doc__
        """
        Number of bits necessary to represent self in binary.
        
        >>> bin(37)
        '0b100101'
        >>> (37).bit_length()
        6
        """
        pass

    def conjugate(self, *args, **kwargs): # real signature unknown
        """ Returns self, the complex conjugate of any int. """
        pass

    @classmethod
    def from_bytes(cls, *args, **kwargs): # real signature unknown
        """
        Return the integer represented by the given array of bytes.
        
          bytes
            Holds the array of bytes to convert.  The argument must either
            support the buffer protocol or be an iterable object producing bytes.
            Bytes and bytearray are examples of built-in objects that support the
            buffer protocol.
          byteorder
            The byte order used to represent the integer.  If byteorder is 'big',
            the most significant byte is at the beginning of the byte array.  If
            byteorder is 'little', the most significant byte is at the end of the
            byte array.  To request the native byte order of the host system, use
            `sys.byteorder' as the byte order value.  Default is to use 'big'.
          signed
            Indicates whether two's complement is used to represent the integer.
        """
        pass

    def to_bytes(self, *args, **kwargs): # real signature unknown
        """
        Return an array of bytes representing an integer.
        
          length
            Length of bytes object to use.  An OverflowError is raised if the
            integer is not representable with the given number of bytes.  Default
            is length 1.
          byteorder
            The byte order used to represent the integer.  If byteorder is 'big',
            the most significant byte is at the beginning of the byte array.  If
            byteorder is 'little', the most significant byte is at the end of the
            byte array.  To request the native byte order of the host system, use
            `sys.byteorder' as the byte order value.  Default is to use 'big'.
          signed
            Determines whether two's complement is used to represent the integer.
            If signed is False and a negative integer is given, an OverflowError
            is raised.
        """
        pass

    def __abs__(self, *args, **kwargs): # real signature unknown
        """ abs(self) """
        pass

    def __add__(self, *args, **kwargs): # real signature unknown
        """ Return self+value. """
        pass

    def __and__(self, *args, **kwargs): # real signature unknown
        """ Return self&value. """
        pass

    def __bool__(self, *args, **kwargs): # real signature unknown
        """ True if self else False """
        pass

    def __ceil__(self, *args, **kwargs): # real signature unknown
        """ Ceiling of an Integral returns itself. """
        pass

    def __divmod__(self, *args, **kwargs): # real signature unknown
        """ Return divmod(self, value). """
        pass

    def __eq__(self, *args, **kwargs): # real signature unknown
        """ Return self==value. """
        pass

    def __float__(self, *args, **kwargs): # real signature unknown
        """ float(self) """
        pass

    def __floordiv__(self, *args, **kwargs): # real signature unknown
        """ Return self//value. """
        pass

    def __floor__(self, *args, **kwargs): # real signature unknown
        """ Flooring an Integral returns itself. """
        pass

    def __format__(self, *args, **kwargs): # real signature unknown
        pass

    def __getattribute__(self, *args, **kwargs): # real signature unknown
        """ Return getattr(self, name). """
        pass

    def __getnewargs__(self, *args, **kwargs): # real signature unknown
        pass

    def __ge__(self, *args, **kwargs): # real signature unknown
        """ Return self>=value. """
        pass

    def __gt__(self, *args, **kwargs): # real signature unknown
        """ Return self>value. """
        pass

    def __hash__(self, *args, **kwargs): # real signature unknown
        """ Return hash(self). """
        pass

    def __index__(self, *args, **kwargs): # real signature unknown
        """ Return self converted to an integer, if self is suitable for use as an index into a list. """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __int__(self, *args, **kwargs): # real signature unknown
        """ int(self) """
        pass

    def __invert__(self, *args, **kwargs): # real signature unknown
        """ ~self """
        pass

    def __le__(self, *args, **kwargs): # real signature unknown
        """ Return self<=value. """
        pass

    def __lshift__(self, *args, **kwargs): # real signature unknown
        """ Return self<<value. """
        pass

    def __lt__(self, *args, **kwargs): # real signature unknown
        """ Return self<value. """
        pass

    def __mod__(self, *args, **kwargs): # real signature unknown
        """ Return self%value. """
        pass

    def __mul__(self, *args, **kwargs): # real signature unknown
        """ Return self*value. """
        pass

    def __neg__(self, *args, **kwargs): # real signature unknown
        """ -self """
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __ne__(self, *args, **kwargs): # real signature unknown
        """ Return self!=value. """
        pass

    def __or__(self, *args, **kwargs): # real signature unknown
        """ Return self|value. """
        pass

    def __pos__(self, *args, **kwargs): # real signature unknown
        """ +self """
        pass

    def __pow__(self, *args, **kwargs): # real signature unknown
        """ Return pow(self, value, mod). """
        pass

    def __radd__(self, *args, **kwargs): # real signature unknown
        """ Return value+self. """
        pass

    def __rand__(self, *args, **kwargs): # real signature unknown
        """ Return value&self. """
        pass

    def __rdivmod__(self, *args, **kwargs): # real signature unknown
        """ Return divmod(value, self). """
        pass

    def __repr__(self, *args, **kwargs): # real signature unknown
        """ Return repr(self). """
        pass

    def __rfloordiv__(self, *args, **kwargs): # real signature unknown
        """ Return value//self. """
        pass

    def __rlshift__(self, *args, **kwargs): # real signature unknown
        """ Return value<<self. """
        pass

    def __rmod__(self, *args, **kwargs): # real signature unknown
        """ Return value%self. """
        pass

    def __rmul__(self, *args, **kwargs): # real signature unknown
        """ Return value*self. """
        pass

    def __ror__(self, *args, **kwargs): # real signature unknown
        """ Return value|self. """
        pass

    def __round__(self, *args, **kwargs): # real signature unknown
        """
        Rounding an Integral returns itself.
        
        Rounding with an ndigits argument also returns an integer.
        """
        pass

    def __rpow__(self, *args, **kwargs): # real signature unknown
        """ Return pow(value, self, mod). """
        pass

    def __rrshift__(self, *args, **kwargs): # real signature unknown
        """ Return value>>self. """
        pass

    def __rshift__(self, *args, **kwargs): # real signature unknown
        """ Return self>>value. """
        pass

    def __rsub__(self, *args, **kwargs): # real signature unknown
        """ Return value-self. """
        pass

    def __rtruediv__(self, *args, **kwargs): # real signature unknown
        """ Return value/self. """
        pass

    def __rxor__(self, *args, **kwargs): # real signature unknown
        """ Return value^self. """
        pass

    def __sizeof__(self, *args, **kwargs): # real signature unknown
        """ Returns size in memory, in bytes. """
        pass

    def __sub__(self, *args, **kwargs): # real signature unknown
        """ Return self-value. """
        pass

    def __truediv__(self, *args, **kwargs): # real signature unknown
        """ Return self/value. """
        pass

    def __trunc__(self, *args, **kwargs): # real signature unknown
        """ Truncating an Integral returns itself. """
        pass

    def __xor__(self, *args, **kwargs): # real signature unknown
        """ Return self^value. """
        pass

    denominator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the denominator of a rational number in lowest terms"""

    imag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the imaginary part of a complex number"""

    numerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the numerator of a rational number in lowest terms"""

    real = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the real part of a complex number"""



ParserState = StringID


NodeType = StringID


Index = StringID


class StringMerger(StringTransformer, CustomSplitMapMixin):
    # no doc
    def do_match(self, *args, **kwargs): # real signature unknown
        pass

    def do_transform(self, *args, **kwargs): # real signature unknown
        pass

    def _merge_one_string_group(self, *args, **kwargs): # real signature unknown
        pass

    def _merge_string_group(self, *args, **kwargs): # real signature unknown
        pass

    def _remove_backslash_line_continuation_chars(self, *args, **kwargs): # real signature unknown
        pass

    def _validate_msg(self, *args, **kwargs): # real signature unknown
        pass

    def __call__(self, *args, **kwargs): # real signature unknown
        """ Call self as a function. """
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __mypyc_defaults_setup(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __dict__ = None # (!) real value is "mappingproxy({'__new__': <built-in method __new__ of ABCMeta object at 0x00000193CA88A320>, '__call__': <slot wrapper '__call__' of 'StringMerger' objects>, 'do_match': <method 'do_match' of 'StringMerger' objects>, 'do_transform': <method 'do_transform' of 'StringMerger' objects>, '_remove_backslash_line_continuation_chars': <staticmethod(<built-in method _remove_backslash_line_continuation_chars of ABCMeta object at 0x00000193CA88A320>)>, '_merge_string_group': <method '_merge_string_group' of 'StringMerger' objects>, '_merge_one_string_group': <method '_merge_one_string_group' of 'StringMerger' objects>, '_validate_msg': <staticmethod(<built-in method _validate_msg of ABCMeta object at 0x00000193CA88A320>)>, '__mypyc_defaults_setup': <method '__mypyc_defaults_setup' of 'StringMerger' objects>, '__setstate__': <method '__setstate__' of 'StringMerger' objects>, '__getstate__': <method '__getstate__' of 'StringMerger' objects>, '__dict__': <member '__dict__' of 'StringMerger' objects>, '__weakref__': <member '__weakref__' of 'StringMerger' objects>, '__doc__': None, '__module__': 'black.trans', '__mypyc_attrs__': ('__name__', 'line_length', 'normalize_strings', '__dict__')})"
    __mypyc_attrs__ = (
        '__name__',
        'line_length',
        'normalize_strings',
        '__dict__',
    )


class StringParenStripper(StringTransformer):
    # no doc
    def do_match(self, *args, **kwargs): # real signature unknown
        pass

    def do_transform(self, *args, **kwargs): # real signature unknown
        pass

    def _transform_to_new_line(self, *args, **kwargs): # real signature unknown
        pass

    def __call__(self, *args, **kwargs): # real signature unknown
        """ Call self as a function. """
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __mypyc_defaults_setup(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __dict__ = None # (!) real value is "mappingproxy({'__new__': <built-in method __new__ of ABCMeta object at 0x00000193CA88A6F0>, '__call__': <slot wrapper '__call__' of 'StringParenStripper' objects>, 'do_match': <method 'do_match' of 'StringParenStripper' objects>, 'do_transform': <method 'do_transform' of 'StringParenStripper' objects>, '_transform_to_new_line': <method '_transform_to_new_line' of 'StringParenStripper' objects>, '__mypyc_defaults_setup': <method '__mypyc_defaults_setup' of 'StringParenStripper' objects>, '__setstate__': <method '__setstate__' of 'StringParenStripper' objects>, '__getstate__': <method '__getstate__' of 'StringParenStripper' objects>, '__dict__': <member '__dict__' of 'StringParenStripper' objects>, '__weakref__': <member '__weakref__' of 'StringParenStripper' objects>, '__doc__': None, '__module__': 'black.trans', '__mypyc_attrs__': ('__name__', 'line_length', 'normalize_strings', '__dict__')})"
    __mypyc_attrs__ = (
        '__name__',
        'line_length',
        'normalize_strings',
        '__dict__',
    )


class StringParenWrapper(BaseStringSplitter, CustomSplitMapMixin):
    # no doc
    def do_splitter_match(self, *args, **kwargs): # real signature unknown
        pass

    def do_transform(self, *args, **kwargs): # real signature unknown
        pass

    def _assert_match(self, *args, **kwargs): # real signature unknown
        pass

    def _assign_match(self, *args, **kwargs): # real signature unknown
        pass

    def _dict_or_lambda_match(self, *args, **kwargs): # real signature unknown
        pass

    def _else_match(self, *args, **kwargs): # real signature unknown
        pass

    def _return_match(self, *args, **kwargs): # real signature unknown
        pass

    def __call__(self, *args, **kwargs): # real signature unknown
        """ Call self as a function. """
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __mypyc_defaults_setup(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __dict__ = None # (!) real value is "mappingproxy({'__new__': <built-in method __new__ of ABCMeta object at 0x00000193CA88B260>, '__call__': <slot wrapper '__call__' of 'StringParenWrapper' objects>, 'do_splitter_match': <method 'do_splitter_match' of 'StringParenWrapper' objects>, '_return_match': <staticmethod(<built-in method _return_match of ABCMeta object at 0x00000193CA88B260>)>, '_else_match': <staticmethod(<built-in method _else_match of ABCMeta object at 0x00000193CA88B260>)>, '_assert_match': <staticmethod(<built-in method _assert_match of ABCMeta object at 0x00000193CA88B260>)>, '_assign_match': <staticmethod(<built-in method _assign_match of ABCMeta object at 0x00000193CA88B260>)>, '_dict_or_lambda_match': <staticmethod(<built-in method _dict_or_lambda_match of ABCMeta object at 0x00000193CA88B260>)>, 'do_transform': <method 'do_transform' of 'StringParenWrapper' objects>, '__mypyc_defaults_setup': <method '__mypyc_defaults_setup' of 'StringParenWrapper' objects>, '__setstate__': <method '__setstate__' of 'StringParenWrapper' objects>, '__getstate__': <method '__getstate__' of 'StringParenWrapper' objects>, '__dict__': <member '__dict__' of 'StringParenWrapper' objects>, '__weakref__': <member '__weakref__' of 'StringParenWrapper' objects>, '__doc__': None, '__module__': 'black.trans', '__mypyc_attrs__': ('STRING_OPERATORS', '__name__', 'line_length', 'normalize_strings', '__dict__')})"
    __mypyc_attrs__ = (
        'STRING_OPERATORS',
        '__name__',
        'line_length',
        'normalize_strings',
        '__dict__',
    )


class StringParser(object):
    # no doc
    def parse(self, *args, **kwargs): # real signature unknown
        pass

    def _next_state(self, *args, **kwargs): # real signature unknown
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __mypyc_defaults_setup(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    _state = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    _unmatched_lpars = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    DEFAULT_TOKEN = 20210605
    DONE = 8
    DOT = 2
    LPAR = 6
    NAME = 3
    PERCENT = 4
    RPAR = 7
    SINGLE_FMT_ARG = 5
    START = 1
    _goto = {
        (
            1,
            23,
        ): 
            2
        ,
        (
            1,
            24,
        ): 
            4
        ,
        (
            1,
            20210605,
        ): 
            8
        ,
        (
            2,
            1,
        ): 
            3
        ,
        (
            3,
            7,
        ): 
            6
        ,
        (
            3,
            20210605,
        ): 
            8
        ,
        (
            4,
            7,
        ): 
            6
        ,
        (
            4,
            20210605,
        ): 
            5
        ,
        (
            5,
            20210605,
        ): 
            8
        ,
        (
            7,
            20210605,
        ): 
            8
        ,
    }
    __mypyc_attrs__ = (
        'DEFAULT_TOKEN',
        'START',
        'DOT',
        'NAME',
        'PERCENT',
        'SINGLE_FMT_ARG',
        'LPAR',
        'RPAR',
        'DONE',
        '_goto',
        '_state',
        '_unmatched_lpars',
    )


class StringSplitter(BaseStringSplitter, CustomSplitMapMixin):
    # no doc
    def do_splitter_match(self, *args, **kwargs): # real signature unknown
        pass

    def do_transform(self, *args, **kwargs): # real signature unknown
        pass

    def _get_break_idx(self, *args, **kwargs): # real signature unknown
        pass

    def _get_illegal_split_indices(self, *args, **kwargs): # real signature unknown
        pass

    def _get_string_operator_leaves(self, *args, **kwargs): # real signature unknown
        pass

    def _iter_fexpr_slices(self, *args, **kwargs): # real signature unknown
        pass

    def _iter_nameescape_slices(self, *args, **kwargs): # real signature unknown
        pass

    def _maybe_normalize_string_quotes(self, *args, **kwargs): # real signature unknown
        pass

    def _normalize_f_string(self, *args, **kwargs): # real signature unknown
        pass

    def __call__(self, *args, **kwargs): # real signature unknown
        """ Call self as a function. """
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __mypyc_defaults_setup(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    MIN_SUBSTR_SIZE = 6
    __dict__ = None # (!) real value is "mappingproxy({'__new__': <built-in method __new__ of ABCMeta object at 0x00000193CA88AE90>, '__call__': <slot wrapper '__call__' of 'StringSplitter' objects>, 'do_splitter_match': <method 'do_splitter_match' of 'StringSplitter' objects>, 'do_transform': <method 'do_transform' of 'StringSplitter' objects>, '_iter_nameescape_slices': <method '_iter_nameescape_slices' of 'StringSplitter' objects>, '_iter_fexpr_slices': <method '_iter_fexpr_slices' of 'StringSplitter' objects>, '_get_illegal_split_indices': <method '_get_illegal_split_indices' of 'StringSplitter' objects>, '_get_break_idx': <method '_get_break_idx' of 'StringSplitter' objects>, '_maybe_normalize_string_quotes': <method '_maybe_normalize_string_quotes' of 'StringSplitter' objects>, '_normalize_f_string': <method '_normalize_f_string' of 'StringSplitter' objects>, '_get_string_operator_leaves': <method '_get_string_operator_leaves' of 'StringSplitter' objects>, '__mypyc_defaults_setup': <method '__mypyc_defaults_setup' of 'StringSplitter' objects>, '__setstate__': <method '__setstate__' of 'StringSplitter' objects>, '__getstate__': <method '__getstate__' of 'StringSplitter' objects>, '__dict__': <member '__dict__' of 'StringSplitter' objects>, '__weakref__': <member '__weakref__' of 'StringSplitter' objects>, 'MIN_SUBSTR_SIZE': 6, '__doc__': None, '__module__': 'black.trans', '__mypyc_attrs__': ('MIN_SUBSTR_SIZE', 'STRING_OPERATORS', '__name__', 'line_length', 'normalize_strings', '__dict__')})"
    __mypyc_attrs__ = (
        'MIN_SUBSTR_SIZE',
        'STRING_OPERATORS',
        '__name__',
        'line_length',
        'normalize_strings',
        '__dict__',
    )


class TypeVar(__typing._Final, __typing._Immutable, __typing._BoundVarianceMixin, __typing._PickleUsingNameMixin):
    """
    Type variable.
    
        Usage::
    
          T = TypeVar('T')  # Can be anything
          A = TypeVar('A', str, bytes)  # Must be str or bytes
    
        Type variables exist primarily for the benefit of static type
        checkers.  They serve as the parameters for generic types as well
        as for generic function definitions.  See class Generic for more
        information on generic types.  Generic functions work as follows:
    
          def repeat(x: T, n: int) -> List[T]:
              '''Return a list containing n references to x.'''
              return [x]*n
    
          def longest(x: A, y: A) -> A:
              '''Return the longest of two strings.'''
              return x if len(x) >= len(y) else y
    
        The latter example's signature is essentially the overloading
        of (str, str) -> str and (bytes, bytes) -> bytes.  Also note
        that if the arguments are instances of some subclass of str,
        the return type is still plain str.
    
        At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.
    
        Type variables defined with covariant=True or contravariant=True
        can be used to declare covariant or contravariant generic types.
        See PEP 484 for more details. By default generic types are invariant
        in all type variables.
    
        Type variables can be introspected. e.g.:
    
          T.__name__ == 'T'
          T.__constraints__ == ()
          T.__covariant__ == False
          T.__contravariant__ = False
          A.__constraints__ == (str, bytes)
    
        Note that only type variables defined in global scope can be pickled.
    """
    def __init__(self, name, *constraints, bound=None, covariant=False, contravariant=False): # reliably restored by inspect
        # no doc
        pass

    def __typing_subst__(self, arg): # reliably restored by inspect
        # no doc
        pass

    __dict__ = None # (!) real value is 'mappingproxy({\'__module__\': \'typing\', \'__doc__\': "Type variable.\\n\\n    Usage::\\n\\n      T = TypeVar(\'T\')  # Can be anything\\n      A = TypeVar(\'A\', str, bytes)  # Must be str or bytes\\n\\n    Type variables exist primarily for the benefit of static type\\n    checkers.  They serve as the parameters for generic types as well\\n    as for generic function definitions.  See class Generic for more\\n    information on generic types.  Generic functions work as follows:\\n\\n      def repeat(x: T, n: int) -> List[T]:\\n          \'\'\'Return a list containing n references to x.\'\'\'\\n          return [x]*n\\n\\n      def longest(x: A, y: A) -> A:\\n          \'\'\'Return the longest of two strings.\'\'\'\\n          return x if len(x) >= len(y) else y\\n\\n    The latter example\'s signature is essentially the overloading\\n    of (str, str) -> str and (bytes, bytes) -> bytes.  Also note\\n    that if the arguments are instances of some subclass of str,\\n    the return type is still plain str.\\n\\n    At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.\\n\\n    Type variables defined with covariant=True or contravariant=True\\n    can be used to declare covariant or contravariant generic types.\\n    See PEP 484 for more details. By default generic types are invariant\\n    in all type variables.\\n\\n    Type variables can be introspected. e.g.:\\n\\n      T.__name__ == \'T\'\\n      T.__constraints__ == ()\\n      T.__covariant__ == False\\n      T.__contravariant__ = False\\n      A.__constraints__ == (str, bytes)\\n\\n    Note that only type variables defined in global scope can be pickled.\\n    ", \'__init__\': <function TypeVar.__init__ at 0x00000193CA4782C0>, \'__typing_subst__\': <function TypeVar.__typing_subst__ at 0x00000193CA478360>, \'__dict__\': <attribute \'__dict__\' of \'TypeVar\' objects>})'


# variables with complex values

CLOSING_BRACKETS = None # (!) real value is '{8, 10, 27}'

OPENING_BRACKETS = None # (!) real value is '{9, 26, 7}'

SPLIT_SAFE_CHARS = None # (!) real value is "frozenset({'?', '?', '?'})"

T = None # (!) real value is '~T'

__loader__ = None # (!) real value is '<_frozen_importlib_external.ExtensionFileLoader object at 0x00000193CC4962D0>'

__spec__ = None # (!) real value is "ModuleSpec(name='black.trans', loader=<_frozen_importlib_external.ExtensionFileLoader object at 0x00000193CC4962D0>, origin='C:\\\\Users\\\\kosta\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\Lib\\\\site-packages\\\\black\\\\trans.cp311-win_amd64.pyd')"

