# encoding: utf-8
# module black.comments
# from C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\comments.cp311-win_amd64.pyd
# by generator 1.147
# no doc

# imports
import re as re # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\re\__init__.py
import blib2to3.pgen2.token as token # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\blib2to3\pgen2\token.cp311-win_amd64.pyd
from black.mode import Mode, Preview

from black.nodes import (container_of, first_leaf_of, make_simple_prefix, 
    preceding_leaf)

from blib2to3.pygram import syms

from blib2to3.pytree import Leaf, Node


# Variables with simple values

COMMENT_EXCEPTIONS = " !:#'"

STANDALONE_COMMENT = 153

_COMMENT_LIST_SEPARATOR = ';'

_COMMENT_PREFIX = '# '

# functions

def children_contains_fmt_on(*args, **kwargs): # real signature unknown
    pass

def Collection(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Collection. """
    pass

def contains_pragma_comment(*args, **kwargs): # real signature unknown
    pass

def convert_one_fmt_off_pair(*args, **kwargs): # real signature unknown
    pass

def dataclass(cls=None, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False): # reliably restored by inspect
    """
    Add dunder methods based on the fields defined in the class.
    
        Examines PEP 526 __annotations__ to determine fields.
    
        If init is true, an __init__() method is added to the class. If repr
        is true, a __repr__() method is added. If order is true, rich
        comparison dunder methods are added. If unsafe_hash is true, a
        __hash__() method is added. If frozen is true, fields may not be
        assigned to after instance creation. If match_args is true, the
        __match_args__ tuple is added. If kw_only is true, then by default
        all fields are keyword-only. If slots is true, a new class with a
        __slots__ attribute is returned.
    """
    pass

def Final(*args, **kwargs): # real signature unknown
    """
    Special typing construct to indicate final names to type checkers.
    
        A final name cannot be re-assigned or overridden in a subclass.
    
        For example::
    
            MAX_SIZE: Final = 9000
            MAX_SIZE += 1  # Error reported by type checker
    
            class Connection:
                TIMEOUT: Final[int] = 10
    
            class FastConnector(Connection):
                TIMEOUT = 1  # Error reported by type checker
    
        There is no runtime checking of these properties.
    """
    pass

def generate_comments(*args, **kwargs): # real signature unknown
    pass

def generate_ignored_nodes(*args, **kwargs): # real signature unknown
    pass

def is_fmt_on(*args, **kwargs): # real signature unknown
    pass

def Iterator(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Iterator. """
    pass

def List(*args, **kwargs): # real signature unknown
    """ A generic version of list. """
    pass

def list_comments(*args, **kwargs): # real signature unknown
    pass

def LN(*args, **kwargs): # real signature unknown
    pass

def lru_cache(maxsize=128, typed=False): # reliably restored by inspect
    """
    Least-recently-used cache decorator.
    
        If *maxsize* is set to None, the LRU features are disabled and the cache
        can grow without bound.
    
        If *typed* is True, arguments of different types will be cached separately.
        For example, f(3.0) and f(3) will be treated as distinct calls with
        distinct results.
    
        Arguments to the cached function must be hashable.
    
        View the cache statistics named tuple (hits, misses, maxsize, currsize)
        with f.cache_info().  Clear the cache and statistics with f.cache_clear().
        Access the underlying function with f.__wrapped__.
    
        See:  https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)
    """
    pass

def make_comment(*args, **kwargs): # real signature unknown
    pass

def normalize_fmt_off(*args, **kwargs): # real signature unknown
    pass

def normalize_trailing_prefix(*args, **kwargs): # real signature unknown
    pass

def Optional(*args, **kwargs): # real signature unknown
    """ Optional[X] is equivalent to Union[X, None]. """
    pass

def Tuple(*args, **kwargs): # real signature unknown
    """
    Deprecated alias to builtins.tuple.
    
        Tuple[X, Y] is the cross-product type of X and Y.
    
        Example: Tuple[T1, T2] is a tuple of two elements corresponding
        to type variables T1 and T2.  Tuple[int, float, str] is a tuple
        of an int, a float and a string.
    
        To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
    """
    pass

def Union(*args, **kwargs): # real signature unknown
    """
    Union type; Union[X, Y] means either X or Y.
    
        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].
    
        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::
    
            assert Union[Union[int, str], float] == Union[int, str, float]
    
        - Unions of a single argument vanish, e.g.::
    
            assert Union[int] == int  # The constructor actually returns int
    
        - Redundant arguments are skipped, e.g.::
    
            assert Union[int, str, int] == Union[int, str]
    
        - When comparing unions, the argument order is ignored, e.g.::
    
            assert Union[int, str] == Union[str, int]
    
        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].
    """
    pass

def _contains_fmt_skip_comment(*args, **kwargs): # real signature unknown
    pass

def _generate_ignored_nodes_from_fmt_skip(*args, **kwargs): # real signature unknown
    pass

# classes

class ProtoComment(object):
    # no doc
    def __eq__(self, other): # reliably restored by inspect
        # no doc
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, type, value, newlines, consumed, form_feed, leading_whitespace): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __repr__(self): # reliably restored by inspect
        # no doc
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    consumed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    form_feed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    leading_whitespace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    newlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __annotations__ = {
        'consumed': int,
        'form_feed': bool,
        'leading_whitespace': str,
        'newlines': '<value is a self-reference, replaced by this string>',
        'type': '<value is a self-reference, replaced by this string>',
        'value': '<value is a self-reference, replaced by this string>',
    }
    __dataclass_fields__ = {
        'consumed': None, # (!) real value is "Field(name='consumed',type=<class 'int'>,default=<dataclasses._MISSING_TYPE object at 0x00000180EB6D47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x00000180EB6D47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'form_feed': None, # (!) real value is "Field(name='form_feed',type=<class 'bool'>,default=<dataclasses._MISSING_TYPE object at 0x00000180EB6D47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x00000180EB6D47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'leading_whitespace': None, # (!) real value is "Field(name='leading_whitespace',type=<class 'str'>,default=<dataclasses._MISSING_TYPE object at 0x00000180EB6D47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x00000180EB6D47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'newlines': None, # (!) real value is "Field(name='newlines',type=<class 'int'>,default=<dataclasses._MISSING_TYPE object at 0x00000180EB6D47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x00000180EB6D47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'type': None, # (!) real value is "Field(name='type',type=<class 'int'>,default=<dataclasses._MISSING_TYPE object at 0x00000180EB6D47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x00000180EB6D47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'value': None, # (!) real value is "Field(name='value',type=<class 'str'>,default=<dataclasses._MISSING_TYPE object at 0x00000180EB6D47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x00000180EB6D47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
    }
    __dataclass_params__ = _DataclassParams(init=True,repr=True,eq=True,order=False,unsafe_hash=False,frozen=False)
    __hash__ = None
    __match_args__ = (
        'type',
        'value',
        'newlines',
        'consumed',
        'form_feed',
        'leading_whitespace',
    )
    __mypyc_attrs__ = (
        'type',
        'value',
        'newlines',
        'consumed',
        'form_feed',
        'leading_whitespace',
    )


# variables with complex values

CLOSING_BRACKETS = None # (!) real value is '{8, 10, 27}'

FMT_OFF = None # (!) real value is "{'# fmt:off', '# fmt: off', '# yapf: disable'}"

FMT_ON = None # (!) real value is "{'# fmt:on', '# fmt: on', '# yapf: enable'}"

FMT_SKIP = None # (!) real value is "{'# fmt:skip', '# fmt: skip'}"

WHITESPACE = None # (!) real value is '{4, 5, 6}'

__loader__ = None # (!) real value is '<_frozen_importlib_external.ExtensionFileLoader object at 0x00000180E99C6550>'

__spec__ = None # (!) real value is "ModuleSpec(name='black.comments', loader=<_frozen_importlib_external.ExtensionFileLoader object at 0x00000180E99C6550>, origin='C:\\\\Users\\\\kosta\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\Lib\\\\site-packages\\\\black\\\\comments.cp311-win_amd64.pyd')"

