# encoding: utf-8
# module black.__init__ calls itself black
# from C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\__init__.cp311-win_amd64.pyd
# by generator 1.147
# no doc

# imports
import io as io # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\io.py
import json as json # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\json\__init__.py
import platform as platform # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\platform.py
import re as re # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\re\__init__.py
import sys as sys # <module 'sys' (built-in)>
import tokenize as tokenize # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\tokenize.py
import traceback as traceback # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\traceback.py
import click as click # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\click\__init__.py
import black.const as const # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\const.cp311-win_amd64.pyd
import black.mode as mode # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\mode.cp311-win_amd64.pyd
import black.output as output # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\output.py
import black.cache as cache # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\cache.cp311-win_amd64.pyd
import black._width_table as _width_table # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\_width_table.cp311-win_amd64.pyd
import black.strings as strings # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\strings.cp311-win_amd64.pyd
import black.nodes as nodes # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\nodes.cp311-win_amd64.pyd
import black.comments as comments # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\comments.cp311-win_amd64.pyd
import black.report as report # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\report.py
import black.handle_ipynb_magics as handle_ipynb_magics # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\handle_ipynb_magics.cp311-win_amd64.pyd
import black.files as files # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\files.py
import black.brackets as brackets # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\brackets.cp311-win_amd64.pyd
import black.lines as lines # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\lines.cp311-win_amd64.pyd
import black.numerics as numerics # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\numerics.cp311-win_amd64.pyd
import black.rusty as rusty # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\rusty.cp311-win_amd64.pyd
import black.trans as trans # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\trans.cp311-win_amd64.pyd
import black.linegen as linegen # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\linegen.cp311-win_amd64.pyd
import black.parsing as parsing # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\parsing.cp311-win_amd64.pyd
import black.ranges as ranges # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\ranges.cp311-win_amd64.pyd
import blib2to3.pgen2.token as token # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\blib2to3\pgen2\token.cp311-win_amd64.pyd
import black as __init__ # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\__init__.cp311-win_amd64.pyd
from black.cache import Cache

from black.comments import normalize_fmt_off

from black.handle_ipynb_magics import (jupyter_dependencies_are_installed, 
    mask_cell, put_trailing_semicolon_back, remove_trailing_semicolon, 
    unmask_cell)

from black.linegen import LineGenerator, transform_line

from black.lines import EmptyLineTracker, LinesBlock

from black.mode import (Feature, FileMode, Mode, Preview, TargetVersion, 
    supports_feature)

from black.nodes import is_number_token, is_simple_decorator_expression

from black.parsing import (ASTSafetyError, InvalidInput, lib2to3_parse, 
    parse_ast, stringify_ast)

from black.ranges import (adjusted_lines, convert_unchanged_lines, 
    parse_line_ranges, sanitized_lines)

from blib2to3.pygram import syms

from blib2to3.pytree import Leaf, Node

import datetime as __datetime
import enum as __enum
import pathlib as __pathlib


# Variables with simple values

COMPILED = True

DEFAULT_EXCLUDES = '/(\\.direnv|\\.eggs|\\.git|\\.hg|\\.ipynb_checkpoints|\\.mypy_cache|\\.nox|\\.pytest_cache|\\.ruff_cache|\\.tox|\\.svn|\\.venv|\\.vscode|__pypackages__|_build|buck-out|build|dist|venv)/'
DEFAULT_INCLUDES = '(\\.pyi?|\\.ipynb)$'

DEFAULT_LINE_LENGTH = 88

STDIN_PLACEHOLDER = '__BLACK_STDIN_FILENAME__'

__version__ = '24.8.0'

# functions

def assert_equivalent(*args, **kwargs): # real signature unknown
    pass

def assert_stable(*args, **kwargs): # real signature unknown
    pass

def best_effort_relative_path(path, root): # reliably restored by inspect
    # no doc
    pass

def check_stability_and_equivalence(*args, **kwargs): # real signature unknown
    pass

def Collection(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Collection. """
    pass

def color_diff(contents): # reliably restored by inspect
    """ Inject the ANSI color codes to the diff. """
    pass

def contextmanager(func): # reliably restored by inspect
    """
    @contextmanager decorator.
    
        Typical usage:
    
            @contextmanager
            def some_generator(<arguments>):
                <setup>
                try:
                    yield <value>
                finally:
                    <cleanup>
    
        This makes this:
    
            with some_generator(<arguments>) as <variable>:
                <body>
    
        equivalent to this:
    
            <setup>
            try:
                <variable> = <value>
                <body>
            finally:
                <cleanup>
    """
    pass

def decode_bytes(*args, **kwargs): # real signature unknown
    pass

def detect_target_versions(*args, **kwargs): # real signature unknown
    pass

def Dict(*args, **kwargs): # real signature unknown
    """ A generic version of dict. """
    pass

def diff(a, b, a_name, b_name): # reliably restored by inspect
    """ Return a unified diff string between strings `a` and `b`. """
    pass

def dump_to_file(*output, ensure_final_newline=True): # reliably restored by inspect
    """ Dump `output` to a temporary file. Return path to the file. """
    pass

def enable_unstable_feature_callback(*args, **kwargs): # real signature unknown
    pass

def err(message=None, nl=True, **styles): # reliably restored by inspect
    # no doc
    pass

def find_project_root(*args, **kwargs): # real signature unknown
    """
    Return a directory containing .git, .hg, or pyproject.toml.
    
        pyproject.toml files are only considered if they contain a [tool.black]
        section and are ignored otherwise.
    
        That directory will be a common parent of all files and directories
        passed in `srcs`.
    
        If no directory in the tree contains a marker that would specify it's the
        project root, the root of the file system is returned.
    
        Returns a two-tuple with the first element as the project root path and
        the second element as a string describing the method by which the
        project root was discovered.
    """
    pass

def find_pyproject_toml(path_search_start, stdin_filename=None): # reliably restored by inspect
    """ Find the absolute filepath to a pyproject.toml if it exists """
    pass

def find_user_pyproject_toml(*args, **kwargs): # real signature unknown
    """
    Return the path to the top-level user configuration for black.
    
        This looks for ~\.black on Windows and ~/.config/black on Linux and other
        Unix systems.
    
        May raise:
        - RuntimeError: if the current user has no homedir
        - PermissionError: if the current process cannot access the user's homedir
    """
    pass

def format_cell(*args, **kwargs): # real signature unknown
    pass

def format_file_contents(*args, **kwargs): # real signature unknown
    pass

def format_file_in_place(*args, **kwargs): # real signature unknown
    pass

def format_ipynb_string(*args, **kwargs): # real signature unknown
    pass

def format_stdin_to_stdout(*args, **kwargs): # real signature unknown
    pass

def format_str(*args, **kwargs): # real signature unknown
    pass

def Generator(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Generator. """
    pass

def gen_python_files(paths, root, include, exclude, extend_exclude, force_exclude, report, gitignore_dict, *, verbose, quiet): # reliably restored by inspect
    """
    Generate all files under `path` whose paths are not excluded by the
        `exclude_regex`, `extend_exclude`, or `force_exclude` regexes,
        but are included by the `include` regex.
    
        Symbolic links pointing outside of the `root` directory are ignored.
    
        `report` is where output about exclusions goes.
    """
    pass

def get_features_used(*args, **kwargs): # real signature unknown
    pass

def get_future_imports(*args, **kwargs): # real signature unknown
    pass

def get_gitignore(*args, **kwargs): # real signature unknown
    """ Return a PathSpec matching gitignore content if present. """
    pass

def get_sources(*args, **kwargs): # real signature unknown
    pass

def ipynb_diff(a, b, a_name, b_name): # reliably restored by inspect
    """ Return a unified diff string between each cell in notebooks `a` and `b`. """
    pass

def Iterator(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Iterator. """
    pass

def List(*args, **kwargs): # real signature unknown
    """ A generic version of list. """
    pass

def LN(*args, **kwargs): # real signature unknown
    pass

def main(*args, **kwargs): # real signature unknown
    pass

def MutableMapping(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.MutableMapping. """
    pass

def mypyc_attr(*attrs, **kwattrs): # reliably restored by inspect
    # no doc
    pass

def nullcontext(*args, **kwds): # reliably restored by inspect
    # no doc
    pass

def Optional(*args, **kwargs): # real signature unknown
    """ Optional[X] is equivalent to Union[X, None]. """
    pass

def out(message=None, nl=True, **styles): # reliably restored by inspect
    # no doc
    pass

def parse_pyproject_toml(path_config): # reliably restored by inspect
    """
    Parse a pyproject toml file, pulling out relevant parts for Black.
    
        If parsing fails, will raise a tomllib.TOMLDecodeError.
    """
    pass

def patched_main(*args, **kwargs): # real signature unknown
    pass

def path_empty(*args, **kwargs): # real signature unknown
    pass

def path_is_excluded(normalized_path, pattern): # reliably restored by inspect
    # no doc
    pass

def Pattern(*args, **kwargs): # real signature unknown
    """ A generic version of re.Pattern. """
    pass

def read_pyproject_toml(*args, **kwargs): # real signature unknown
    pass

def reformat_code(*args, **kwargs): # real signature unknown
    pass

def reformat_one(*args, **kwargs): # real signature unknown
    pass

def replace(obj, **changes): # reliably restored by inspect
    """
    Return a new object replacing specified fields with new values.
    
        This is especially useful for frozen classes.  Example usage::
    
          @dataclass(frozen=True)
          class C:
              x: int
              y: int
    
          c = C(1, 2)
          c1 = replace(c, x=3)
          assert c1.x == 3 and c1.y == 2
    """
    pass

def resolves_outside_root_or_cannot_stat(path, root, report=None): # reliably restored by inspect
    """
    Returns whether the path is a symbolic link that points outside the
        root directory. Also returns True if we failed to resolve the path.
    """
    pass

def re_compile_maybe_verbose(*args, **kwargs): # real signature unknown
    pass

def Sequence(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Sequence. """
    pass

def Set(*args, **kwargs): # real signature unknown
    """ A generic version of set. """
    pass

def Sized(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Sized. """
    pass

def spellcheck_pyproject_toml_keys(*args, **kwargs): # real signature unknown
    pass

def target_version_option_callback(*args, **kwargs): # real signature unknown
    pass

def Tuple(*args, **kwargs): # real signature unknown
    """
    Deprecated alias to builtins.tuple.
    
        Tuple[X, Y] is the cross-product type of X and Y.
    
        Example: Tuple[T1, T2] is a tuple of two elements corresponding
        to type variables T1 and T2.  Tuple[int, float, str] is a tuple
        of an int, a float and a string.
    
        To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
    """
    pass

def Union(*args, **kwargs): # real signature unknown
    """
    Union type; Union[X, Y] means either X or Y.
    
        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].
    
        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::
    
            assert Union[Union[int, str], float] == Union[int, str, float]
    
        - Unions of a single argument vanish, e.g.::
    
            assert Union[int] == int  # The constructor actually returns int
    
        - Redundant arguments are skipped, e.g.::
    
            assert Union[int, str, int] == Union[int, str]
    
        - When comparing unions, the argument order is ignored, e.g.::
    
            assert Union[int, str] == Union[str, int]
    
        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].
    """
    pass

def validate_cell(*args, **kwargs): # real signature unknown
    pass

def validate_metadata(*args, **kwargs): # real signature unknown
    pass

def validate_regex(*args, **kwargs): # real signature unknown
    pass

def wrap_stream_for_windows(f): # reliably restored by inspect
    """
    Wrap stream with colorama's wrap_stream so colors are shown on Windows.
    
        If `colorama` is unavailable, the original stream is returned unmodified.
        Otherwise, the `wrap_stream()` function determines whether the stream needs
        to be wrapped for a Windows environment and will accordingly either return
        an `AnsiToWin32` wrapper or the original stream.
    """
    pass

def _contains_asexpr(*args, **kwargs): # real signature unknown
    pass

def _format_str_once(*args, **kwargs): # real signature unknown
    pass

# classes

class Any(object):
    """
    Special type indicating an unconstrained type.
    
        - Any is compatible with every type.
        - Any assumed to have all methods.
        - All values assumed to be instances of Any.
    
        Note that all the above statements are true from the point of view of
        static type checkers. At runtime, Any should not be used with instance
        checks.
    """
    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(cls, *args, **kwargs): # reliably restored by inspect
        # no doc
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """list of weak references to the object (if defined)"""


    __dict__ = None # (!) real value is "mappingproxy({'__module__': 'typing', '__doc__': 'Special type indicating an unconstrained type.\\n\\n    - Any is compatible with every type.\\n    - Any assumed to have all methods.\\n    - All values assumed to be instances of Any.\\n\\n    Note that all the above statements are true from the point of view of\\n    static type checkers. At runtime, Any should not be used with instance\\n    checks.\\n    ', '__new__': <staticmethod(<function Any.__new__ at 0x00000224FC8D7060>)>, '__dict__': <attribute '__dict__' of 'Any' objects>, '__weakref__': <attribute '__weakref__' of 'Any' objects>})"


class Enum(object):
    """
    Create a collection of name/value pairs.
    
        Example enumeration:
    
        >>> class Color(Enum):
        ...     RED = 1
        ...     BLUE = 2
        ...     GREEN = 3
    
        Access them by:
    
        - attribute access::
    
        >>> Color.RED
        <Color.RED: 1>
    
        - value lookup:
    
        >>> Color(1)
        <Color.RED: 1>
    
        - name lookup:
    
        >>> Color['RED']
        <Color.RED: 1>
    
        Enumerations can be iterated over, and know how many members they have:
    
        >>> len(Color)
        3
    
        >>> list(Color)
        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]
    
        Methods can be added to enumerations, and members can have their own
        attributes -- see the documentation for details.
    """
    def _generate_next_value_(name, start, count, last_values): # reliably restored by inspect
        """
        Generate the next value when not given.
        
                name: the name of the member
                start: the initial start value or None
                count: the number of existing members
                last_values: the list of values assigned
        """
        pass

    @classmethod
    def _missing_(cls, *args, **kwargs): # real signature unknown
        pass

    def _new_member_(cls, value): # reliably restored by inspect
        # no doc
        pass

    def __dir__(self): # reliably restored by inspect
        """ Returns all members and all public methods """
        pass

    def __format__(self, format_spec): # reliably restored by inspect
        # no doc
        pass

    def __hash__(self): # reliably restored by inspect
        # no doc
        pass

    def __init__(self, *args, **kwds): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(cls, value): # reliably restored by inspect
        # no doc
        pass

    def __reduce_ex__(self, proto): # reliably restored by inspect
        # no doc
        pass

    def __repr__(self): # reliably restored by inspect
        # no doc
        pass

    def __str__(self): # reliably restored by inspect
        # no doc
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """list of weak references to the object (if defined)"""


    name = None # (!) real value is '<enum.property object at 0x00000224FC592F90>'
    value = None # (!) real value is '<enum.property object at 0x00000224FC5930D0>'
    _member_map_ = {}
    _member_names_ = []
    _member_type_ = object
    _unhashable_values_ = []
    _use_args_ = False
    _value2member_map_ = {}
    _value_repr_ = None
    __dict__ = None # (!) real value is 'mappingproxy({\'__module__\': \'enum\', \'__doc__\': "\\n    Create a collection of name/value pairs.\\n\\n    Example enumeration:\\n\\n    >>> class Color(Enum):\\n    ...     RED = 1\\n    ...     BLUE = 2\\n    ...     GREEN = 3\\n\\n    Access them by:\\n\\n    - attribute access::\\n\\n    >>> Color.RED\\n    <Color.RED: 1>\\n\\n    - value lookup:\\n\\n    >>> Color(1)\\n    <Color.RED: 1>\\n\\n    - name lookup:\\n\\n    >>> Color[\'RED\']\\n    <Color.RED: 1>\\n\\n    Enumerations can be iterated over, and know how many members they have:\\n\\n    >>> len(Color)\\n    3\\n\\n    >>> list(Color)\\n    [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\\n\\n    Methods can be added to enumerations, and members can have their own\\n    attributes -- see the documentation for details.\\n    ", \'__new__\': <staticmethod(<function Enum.__new__ at 0x00000224FC37A840>)>, \'__init__\': <function Enum.__init__ at 0x00000224FC37A8E0>, \'_generate_next_value_\': <function Enum._generate_next_value_ at 0x00000224FC37A980>, \'_missing_\': <classmethod(<function Enum._missing_ at 0x00000224FC37AA20>)>, \'__repr__\': <function Enum.__repr__ at 0x00000224FC37AAC0>, \'__str__\': <function Enum.__str__ at 0x00000224FC37AB60>, \'__dir__\': <function Enum.__dir__ at 0x00000224FC37AC00>, \'__format__\': <function Enum.__format__ at 0x00000224FC37ACA0>, \'__hash__\': <function Enum.__hash__ at 0x00000224FC37AD40>, \'__reduce_ex__\': <function Enum.__reduce_ex__ at 0x00000224FC37ADE0>, \'name\': <enum.property object at 0x00000224FC592F90>, \'value\': <enum.property object at 0x00000224FC5930D0>, \'_new_member_\': <function Enum.__new__ at 0x00000224FC37A840>, \'_use_args_\': False, \'_member_names_\': [], \'_member_map_\': {}, \'_value2member_map_\': {}, \'_unhashable_values_\': [], \'_member_type_\': <class \'object\'>, \'_value_repr_\': None, \'__dict__\': <attribute \'__dict__\' of \'Enum\' objects>, \'__weakref__\': <attribute \'__weakref__\' of \'Enum\' objects>})'


class Changed(__enum.Enum):
    # no doc
    def _generate_next_value_(name, start, count, last_values): # reliably restored by inspect
        """
        Generate the next value when not given.
        
                name: the name of the member
                start: the initial start value or None
                count: the number of existing members
                last_values: the list of values assigned
        """
        pass

    def _new_member_(self, *args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __init__(self, *args, **kwds): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(cls, value): # reliably restored by inspect
        # no doc
        pass

    CACHED = None # (!) real value is '<Changed.CACHED: 1>'
    NO = None # (!) real value is '<Changed.NO: 0>'
    YES = None # (!) real value is '<Changed.YES: 2>'
    _member_map_ = {
        'CACHED': None, # (!) real value is '<Changed.CACHED: 1>'
        'NO': None, # (!) real value is '<Changed.NO: 0>'
        'YES': None, # (!) real value is '<Changed.YES: 2>'
    }
    _member_names_ = [
        'NO',
        'CACHED',
        'YES',
    ]
    _member_type_ = object
    _unhashable_values_ = []
    _use_args_ = False
    _value2member_map_ = {
        0: None, # (!) real value is '<Changed.NO: 0>'
        1: None, # (!) real value is '<Changed.CACHED: 1>'
        2: None, # (!) real value is '<Changed.YES: 2>'
    }
    _value_repr_ = None


class datetime(__datetime.date):
    """
    datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
    
    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
    """
    def astimezone(self, *args, **kwargs): # real signature unknown
        """ tz -> convert to local time in new timezone tz """
        pass

    @classmethod
    def combine(cls, *args, **kwargs): # real signature unknown
        """ date, time -> datetime with same date and time fields """
        pass

    def ctime(self): # real signature unknown; restored from __doc__
        """ Return ctime() style string. """
        pass

    def date(self, *args, **kwargs): # real signature unknown
        """ Return date object with same year, month and day. """
        pass

    def dst(self): # real signature unknown; restored from __doc__
        """ Return self.tzinfo.dst(self). """
        pass

    @classmethod
    def fromisoformat(cls, *args, **kwargs): # real signature unknown
        """ string -> datetime from a string in most ISO 8601 formats """
        pass

    @classmethod
    def fromtimestamp(cls, *args, **kwargs): # real signature unknown
        """ timestamp[, tz] -> tz's local time from POSIX timestamp. """
        pass

    def isoformat(self, *args, **kwargs): # real signature unknown
        """
        [sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].
        sep is used to separate the year from the time, and defaults to 'T'.
        The optional argument timespec specifies the number of additional terms
        of the time to include. Valid options are 'auto', 'hours', 'minutes',
        'seconds', 'milliseconds' and 'microseconds'.
        """
        pass

    @classmethod
    def now(cls, *args, **kwargs): # real signature unknown
        """
        Returns new datetime object representing current time local to tz.
        
          tz
            Timezone object.
        
        If no tz is specified, uses local timezone.
        """
        pass

    def replace(self, *args, **kwargs): # real signature unknown
        """ Return datetime with new specified fields. """
        pass

    @classmethod
    def strptime(cls): # real signature unknown; restored from __doc__
        """ string, format -> new datetime parsed from a string (like time.strptime()). """
        pass

    def time(self, *args, **kwargs): # real signature unknown
        """ Return time object with same time but with tzinfo=None. """
        pass

    def timestamp(self, *args, **kwargs): # real signature unknown
        """ Return POSIX timestamp as float. """
        pass

    def timetuple(self, *args, **kwargs): # real signature unknown
        """ Return time tuple, compatible with time.localtime(). """
        pass

    def timetz(self, *args, **kwargs): # real signature unknown
        """ Return time object with same time and tzinfo. """
        pass

    def tzname(self): # real signature unknown; restored from __doc__
        """ Return self.tzinfo.tzname(self). """
        pass

    @classmethod
    def utcfromtimestamp(cls, *args, **kwargs): # real signature unknown
        """ Construct a naive UTC datetime from a POSIX timestamp. """
        pass

    @classmethod
    def utcnow(cls, *args, **kwargs): # real signature unknown
        """ Return a new datetime representing UTC day and time. """
        pass

    def utcoffset(self): # real signature unknown; restored from __doc__
        """ Return self.tzinfo.utcoffset(self). """
        pass

    def utctimetuple(self, *args, **kwargs): # real signature unknown
        """ Return UTC time tuple, compatible with time.localtime(). """
        pass

    def __add__(self, *args, **kwargs): # real signature unknown
        """ Return self+value. """
        pass

    def __eq__(self, *args, **kwargs): # real signature unknown
        """ Return self==value. """
        pass

    def __getattribute__(self, *args, **kwargs): # real signature unknown
        """ Return getattr(self, name). """
        pass

    def __ge__(self, *args, **kwargs): # real signature unknown
        """ Return self>=value. """
        pass

    def __gt__(self, *args, **kwargs): # real signature unknown
        """ Return self>value. """
        pass

    def __hash__(self, *args, **kwargs): # real signature unknown
        """ Return hash(self). """
        pass

    def __init__(self, year, month, day, hour=None, minute=None, second=None, microsecond=None, tzinfo=None): # real signature unknown; restored from __doc__
        pass

    def __le__(self, *args, **kwargs): # real signature unknown
        """ Return self<=value. """
        pass

    def __lt__(self, *args, **kwargs): # real signature unknown
        """ Return self<value. """
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __ne__(self, *args, **kwargs): # real signature unknown
        """ Return self!=value. """
        pass

    def __radd__(self, *args, **kwargs): # real signature unknown
        """ Return value+self. """
        pass

    def __reduce_ex__(self, proto): # real signature unknown; restored from __doc__
        """ __reduce_ex__(proto) -> (cls, state) """
        pass

    def __reduce__(self): # real signature unknown; restored from __doc__
        """ __reduce__() -> (cls, state) """
        pass

    def __repr__(self, *args, **kwargs): # real signature unknown
        """ Return repr(self). """
        pass

    def __rsub__(self, *args, **kwargs): # real signature unknown
        """ Return value-self. """
        pass

    def __str__(self, *args, **kwargs): # real signature unknown
        """ Return str(self). """
        pass

    def __sub__(self, *args, **kwargs): # real signature unknown
        """ Return self-value. """
        pass

    fold = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    hour = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    microsecond = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    minute = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    second = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    tzinfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    max = datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)
    min = datetime.datetime(1, 1, 1, 0, 0)
    resolution = datetime.timedelta(microseconds=1)


class NewLine(object):
    """
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str
    
    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
    """
    def capitalize(self, *args, **kwargs): # real signature unknown
        """
        Return a capitalized version of the string.
        
        More specifically, make the first character have upper case and the rest lower
        case.
        """
        pass

    def casefold(self, *args, **kwargs): # real signature unknown
        """ Return a version of the string suitable for caseless comparisons. """
        pass

    def center(self, *args, **kwargs): # real signature unknown
        """
        Return a centered string of length width.
        
        Padding is done using the specified fill character (default is a space).
        """
        pass

    def count(self, sub, start=None, end=None): # real signature unknown; restored from __doc__
        """
        S.count(sub[, start[, end]]) -> int
        
        Return the number of non-overlapping occurrences of substring sub in
        string S[start:end].  Optional arguments start and end are
        interpreted as in slice notation.
        """
        return 0

    def encode(self, *args, **kwargs): # real signature unknown
        """
        Encode the string using the codec registered for encoding.
        
          encoding
            The encoding in which to encode the string.
          errors
            The error handling scheme to use for encoding errors.
            The default is 'strict' meaning that encoding errors raise a
            UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
            'xmlcharrefreplace' as well as any other name registered with
            codecs.register_error that can handle UnicodeEncodeErrors.
        """
        pass

    def endswith(self, suffix, start=None, end=None): # real signature unknown; restored from __doc__
        """
        S.endswith(suffix[, start[, end]]) -> bool
        
        Return True if S ends with the specified suffix, False otherwise.
        With optional start, test S beginning at that position.
        With optional end, stop comparing S at that position.
        suffix can also be a tuple of strings to try.
        """
        return False

    def expandtabs(self, *args, **kwargs): # real signature unknown
        """
        Return a copy where all tab characters are expanded using spaces.
        
        If tabsize is not given, a tab size of 8 characters is assumed.
        """
        pass

    def find(self, sub, start=None, end=None): # real signature unknown; restored from __doc__
        """
        S.find(sub[, start[, end]]) -> int
        
        Return the lowest index in S where substring sub is found,
        such that sub is contained within S[start:end].  Optional
        arguments start and end are interpreted as in slice notation.
        
        Return -1 on failure.
        """
        return 0

    def format(self, *args, **kwargs): # real signature unknown; restored from __doc__
        """
        S.format(*args, **kwargs) -> str
        
        Return a formatted version of S, using substitutions from args and kwargs.
        The substitutions are identified by braces ('{' and '}').
        """
        return ""

    def format_map(self, mapping): # real signature unknown; restored from __doc__
        """
        S.format_map(mapping) -> str
        
        Return a formatted version of S, using substitutions from mapping.
        The substitutions are identified by braces ('{' and '}').
        """
        return ""

    def index(self, sub, start=None, end=None): # real signature unknown; restored from __doc__
        """
        S.index(sub[, start[, end]]) -> int
        
        Return the lowest index in S where substring sub is found,
        such that sub is contained within S[start:end].  Optional
        arguments start and end are interpreted as in slice notation.
        
        Raises ValueError when the substring is not found.
        """
        return 0

    def isalnum(self, *args, **kwargs): # real signature unknown
        """
        Return True if the string is an alpha-numeric string, False otherwise.
        
        A string is alpha-numeric if all characters in the string are alpha-numeric and
        there is at least one character in the string.
        """
        pass

    def isalpha(self, *args, **kwargs): # real signature unknown
        """
        Return True if the string is an alphabetic string, False otherwise.
        
        A string is alphabetic if all characters in the string are alphabetic and there
        is at least one character in the string.
        """
        pass

    def isascii(self, *args, **kwargs): # real signature unknown
        """
        Return True if all characters in the string are ASCII, False otherwise.
        
        ASCII characters have code points in the range U+0000-U+007F.
        Empty string is ASCII too.
        """
        pass

    def isdecimal(self, *args, **kwargs): # real signature unknown
        """
        Return True if the string is a decimal string, False otherwise.
        
        A string is a decimal string if all characters in the string are decimal and
        there is at least one character in the string.
        """
        pass

    def isdigit(self, *args, **kwargs): # real signature unknown
        """
        Return True if the string is a digit string, False otherwise.
        
        A string is a digit string if all characters in the string are digits and there
        is at least one character in the string.
        """
        pass

    def isidentifier(self, *args, **kwargs): # real signature unknown
        """
        Return True if the string is a valid Python identifier, False otherwise.
        
        Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
        such as "def" or "class".
        """
        pass

    def islower(self, *args, **kwargs): # real signature unknown
        """
        Return True if the string is a lowercase string, False otherwise.
        
        A string is lowercase if all cased characters in the string are lowercase and
        there is at least one cased character in the string.
        """
        pass

    def isnumeric(self, *args, **kwargs): # real signature unknown
        """
        Return True if the string is a numeric string, False otherwise.
        
        A string is numeric if all characters in the string are numeric and there is at
        least one character in the string.
        """
        pass

    def isprintable(self, *args, **kwargs): # real signature unknown
        """
        Return True if the string is printable, False otherwise.
        
        A string is printable if all of its characters are considered printable in
        repr() or if it is empty.
        """
        pass

    def isspace(self, *args, **kwargs): # real signature unknown
        """
        Return True if the string is a whitespace string, False otherwise.
        
        A string is whitespace if all characters in the string are whitespace and there
        is at least one character in the string.
        """
        pass

    def istitle(self, *args, **kwargs): # real signature unknown
        """
        Return True if the string is a title-cased string, False otherwise.
        
        In a title-cased string, upper- and title-case characters may only
        follow uncased characters and lowercase characters only cased ones.
        """
        pass

    def isupper(self, *args, **kwargs): # real signature unknown
        """
        Return True if the string is an uppercase string, False otherwise.
        
        A string is uppercase if all cased characters in the string are uppercase and
        there is at least one cased character in the string.
        """
        pass

    def join(self, ab=None, pq=None, rs=None): # real signature unknown; restored from __doc__
        """
        Concatenate any number of strings.
        
        The string whose method is called is inserted in between each given string.
        The result is returned as a new string.
        
        Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
        """
        pass

    def ljust(self, *args, **kwargs): # real signature unknown
        """
        Return a left-justified string of length width.
        
        Padding is done using the specified fill character (default is a space).
        """
        pass

    def lower(self, *args, **kwargs): # real signature unknown
        """ Return a copy of the string converted to lowercase. """
        pass

    def lstrip(self, *args, **kwargs): # real signature unknown
        """
        Return a copy of the string with leading whitespace removed.
        
        If chars is given and not None, remove characters in chars instead.
        """
        pass

    def maketrans(self, *args, **kwargs): # real signature unknown
        """
        Return a translation table usable for str.translate().
        
        If there is only one argument, it must be a dictionary mapping Unicode
        ordinals (integers) or characters to Unicode ordinals, strings or None.
        Character keys will be then converted to ordinals.
        If there are two arguments, they must be strings of equal length, and
        in the resulting dictionary, each character in x will be mapped to the
        character at the same position in y. If there is a third argument, it
        must be a string, whose characters will be mapped to None in the result.
        """
        pass

    def partition(self, *args, **kwargs): # real signature unknown
        """
        Partition the string into three parts using the given separator.
        
        This will search for the separator in the string.  If the separator is found,
        returns a 3-tuple containing the part before the separator, the separator
        itself, and the part after it.
        
        If the separator is not found, returns a 3-tuple containing the original string
        and two empty strings.
        """
        pass

    def removeprefix(self, *args, **kwargs): # real signature unknown
        """
        Return a str with the given prefix string removed if present.
        
        If the string starts with the prefix string, return string[len(prefix):].
        Otherwise, return a copy of the original string.
        """
        pass

    def removesuffix(self, *args, **kwargs): # real signature unknown
        """
        Return a str with the given suffix string removed if present.
        
        If the string ends with the suffix string and that suffix is not empty,
        return string[:-len(suffix)]. Otherwise, return a copy of the original
        string.
        """
        pass

    def replace(self, *args, **kwargs): # real signature unknown
        """
        Return a copy with all occurrences of substring old replaced by new.
        
          count
            Maximum number of occurrences to replace.
            -1 (the default value) means replace all occurrences.
        
        If the optional argument count is given, only the first count occurrences are
        replaced.
        """
        pass

    def rfind(self, sub, start=None, end=None): # real signature unknown; restored from __doc__
        """
        S.rfind(sub[, start[, end]]) -> int
        
        Return the highest index in S where substring sub is found,
        such that sub is contained within S[start:end].  Optional
        arguments start and end are interpreted as in slice notation.
        
        Return -1 on failure.
        """
        return 0

    def rindex(self, sub, start=None, end=None): # real signature unknown; restored from __doc__
        """
        S.rindex(sub[, start[, end]]) -> int
        
        Return the highest index in S where substring sub is found,
        such that sub is contained within S[start:end].  Optional
        arguments start and end are interpreted as in slice notation.
        
        Raises ValueError when the substring is not found.
        """
        return 0

    def rjust(self, *args, **kwargs): # real signature unknown
        """
        Return a right-justified string of length width.
        
        Padding is done using the specified fill character (default is a space).
        """
        pass

    def rpartition(self, *args, **kwargs): # real signature unknown
        """
        Partition the string into three parts using the given separator.
        
        This will search for the separator in the string, starting at the end. If
        the separator is found, returns a 3-tuple containing the part before the
        separator, the separator itself, and the part after it.
        
        If the separator is not found, returns a 3-tuple containing two empty strings
        and the original string.
        """
        pass

    def rsplit(self, *args, **kwargs): # real signature unknown
        """
        Return a list of the substrings in the string, using sep as the separator string.
        
          sep
            The separator used to split the string.
        
            When set to None (the default value), will split on any whitespace
            character (including \\n \\r \\t \\f and spaces) and will discard
            empty strings from the result.
          maxsplit
            Maximum number of splits (starting from the left).
            -1 (the default value) means no limit.
        
        Splitting starts at the end of the string and works to the front.
        """
        pass

    def rstrip(self, *args, **kwargs): # real signature unknown
        """
        Return a copy of the string with trailing whitespace removed.
        
        If chars is given and not None, remove characters in chars instead.
        """
        pass

    def split(self): # real signature unknown; restored from __doc__
        """
        Return a list of the substrings in the string, using sep as the separator string.
        
          sep
            The separator used to split the string.
        
            When set to None (the default value), will split on any whitespace
            character (including \\n \\r \\t \\f and spaces) and will discard
            empty strings from the result.
          maxsplit
            Maximum number of splits (starting from the left).
            -1 (the default value) means no limit.
        
        Note, str.split() is mainly useful for data that has been intentionally
        delimited.  With natural text that includes punctuation, consider using
        the regular expression module.
        """
        pass

    def splitlines(self, *args, **kwargs): # real signature unknown
        """
        Return a list of the lines in the string, breaking at line boundaries.
        
        Line breaks are not included in the resulting list unless keepends is given and
        true.
        """
        pass

    def startswith(self, prefix, start=None, end=None): # real signature unknown; restored from __doc__
        """
        S.startswith(prefix[, start[, end]]) -> bool
        
        Return True if S starts with the specified prefix, False otherwise.
        With optional start, test S beginning at that position.
        With optional end, stop comparing S at that position.
        prefix can also be a tuple of strings to try.
        """
        return False

    def strip(self, *args, **kwargs): # real signature unknown
        """
        Return a copy of the string with leading and trailing whitespace removed.
        
        If chars is given and not None, remove characters in chars instead.
        """
        pass

    def swapcase(self, *args, **kwargs): # real signature unknown
        """ Convert uppercase characters to lowercase and lowercase characters to uppercase. """
        pass

    def title(self, *args, **kwargs): # real signature unknown
        """
        Return a version of the string where each word is titlecased.
        
        More specifically, words start with uppercased characters and all remaining
        cased characters have lower case.
        """
        pass

    def translate(self, *args, **kwargs): # real signature unknown
        """
        Replace each character in the string using the given translation table.
        
          table
            Translation table, which must be a mapping of Unicode ordinals to
            Unicode ordinals, strings, or None.
        
        The table must implement lookup/indexing via __getitem__, for instance a
        dictionary or list.  If this operation raises LookupError, the character is
        left untouched.  Characters mapped to None are deleted.
        """
        pass

    def upper(self, *args, **kwargs): # real signature unknown
        """ Return a copy of the string converted to uppercase. """
        pass

    def zfill(self, *args, **kwargs): # real signature unknown
        """
        Pad a numeric string with zeros on the left, to fill a field of the given width.
        
        The string is never truncated.
        """
        pass

    def __add__(self, *args, **kwargs): # real signature unknown
        """ Return self+value. """
        pass

    def __contains__(self, *args, **kwargs): # real signature unknown
        """ Return key in self. """
        pass

    def __eq__(self, *args, **kwargs): # real signature unknown
        """ Return self==value. """
        pass

    def __format__(self, *args, **kwargs): # real signature unknown
        """ Return a formatted version of the string as described by format_spec. """
        pass

    def __getattribute__(self, *args, **kwargs): # real signature unknown
        """ Return getattr(self, name). """
        pass

    def __getitem__(self, *args, **kwargs): # real signature unknown
        """ Return self[key]. """
        pass

    def __getnewargs__(self, *args, **kwargs): # real signature unknown
        pass

    def __ge__(self, *args, **kwargs): # real signature unknown
        """ Return self>=value. """
        pass

    def __gt__(self, *args, **kwargs): # real signature unknown
        """ Return self>value. """
        pass

    def __hash__(self, *args, **kwargs): # real signature unknown
        """ Return hash(self). """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __iter__(self, *args, **kwargs): # real signature unknown
        """ Implement iter(self). """
        pass

    def __len__(self, *args, **kwargs): # real signature unknown
        """ Return len(self). """
        pass

    def __le__(self, *args, **kwargs): # real signature unknown
        """ Return self<=value. """
        pass

    def __lt__(self, *args, **kwargs): # real signature unknown
        """ Return self<value. """
        pass

    def __mod__(self, *args, **kwargs): # real signature unknown
        """ Return self%value. """
        pass

    def __mul__(self, *args, **kwargs): # real signature unknown
        """ Return self*value. """
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __ne__(self, *args, **kwargs): # real signature unknown
        """ Return self!=value. """
        pass

    def __repr__(self, *args, **kwargs): # real signature unknown
        """ Return repr(self). """
        pass

    def __rmod__(self, *args, **kwargs): # real signature unknown
        """ Return value%self. """
        pass

    def __rmul__(self, *args, **kwargs): # real signature unknown
        """ Return value*self. """
        pass

    def __sizeof__(self, *args, **kwargs): # real signature unknown
        """ Return the size of the string in memory, in bytes. """
        pass

    def __str__(self, *args, **kwargs): # real signature unknown
        """ Return str(self). """
        pass


FileContent = NewLine


Encoding = NewLine


class GitWildMatchPatternError(ValueError):
    """
    The :class:`GitWildMatchPatternError` indicates an invalid git wild match
    	pattern.
    """
    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """list of weak references to the object (if defined)"""



class JSONDecodeError(ValueError):
    """
    Subclass of ValueError with the following additional properties:
    
        msg: The unformatted error message
        doc: The JSON document being parsed
        pos: The start index of doc where parsing failed
        lineno: The line corresponding to pos
        colno: The column corresponding to pos
    """
    def __init__(self, msg, doc, pos): # reliably restored by inspect
        # no doc
        pass

    def __reduce__(self): # reliably restored by inspect
        # no doc
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """list of weak references to the object (if defined)"""



class NothingChanged(UserWarning):
    """ Raised when reformatted code is the same as source. """
    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """list of weak references to the object (if defined)"""



class ParameterSource(__enum.Enum):
    """
    This is an :class:`~enum.Enum` that indicates the source of a
        parameter's value.
    
        Use :meth:`click.Context.get_parameter_source` to get the
        source for a parameter by name.
    
        .. versionchanged:: 8.0
            Use :class:`~enum.Enum` and drop the ``validate`` method.
    
        .. versionchanged:: 8.0
            Added the ``PROMPT`` value.
    """
    def _generate_next_value_(name, start, count, last_values): # reliably restored by inspect
        """
        Generate the next value when not given.
        
                name: the name of the member
                start: the initial start value or None
                count: the number of existing members
                last_values: the list of values assigned
        """
        pass

    def _new_member_(self, *args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __init__(self, *args, **kwds): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(cls, value): # reliably restored by inspect
        # no doc
        pass

    COMMANDLINE = None # (!) real value is '<ParameterSource.COMMANDLINE: 1>'
    DEFAULT = None # (!) real value is '<ParameterSource.DEFAULT: 3>'
    DEFAULT_MAP = None # (!) real value is '<ParameterSource.DEFAULT_MAP: 4>'
    ENVIRONMENT = None # (!) real value is '<ParameterSource.ENVIRONMENT: 2>'
    PROMPT = None # (!) real value is '<ParameterSource.PROMPT: 5>'
    _member_map_ = {
        'COMMANDLINE': None, # (!) real value is '<ParameterSource.COMMANDLINE: 1>'
        'DEFAULT': None, # (!) real value is '<ParameterSource.DEFAULT: 3>'
        'DEFAULT_MAP': None, # (!) real value is '<ParameterSource.DEFAULT_MAP: 4>'
        'ENVIRONMENT': None, # (!) real value is '<ParameterSource.ENVIRONMENT: 2>'
        'PROMPT': None, # (!) real value is '<ParameterSource.PROMPT: 5>'
    }
    _member_names_ = [
        'COMMANDLINE',
        'ENVIRONMENT',
        'DEFAULT',
        'DEFAULT_MAP',
        'PROMPT',
    ]
    _member_type_ = object
    _unhashable_values_ = []
    _use_args_ = False
    _value2member_map_ = {
        1: None, # (!) real value is '<ParameterSource.COMMANDLINE: 1>'
        2: None, # (!) real value is '<ParameterSource.ENVIRONMENT: 2>'
        3: None, # (!) real value is '<ParameterSource.DEFAULT: 3>'
        4: None, # (!) real value is '<ParameterSource.DEFAULT_MAP: 4>'
        5: None, # (!) real value is '<ParameterSource.PROMPT: 5>'
    }
    _value_repr_ = None


class Path(__pathlib.PurePath):
    """
    PurePath subclass that can make system calls.
    
        Path represents a filesystem path but unlike PurePath, also offers
        methods to do system calls on path objects. Depending on your system,
        instantiating a Path will return either a PosixPath or a WindowsPath
        object. You can also instantiate a PosixPath or WindowsPath directly,
        but cannot instantiate a WindowsPath on a POSIX system or vice versa.
    """
    def absolute(self): # reliably restored by inspect
        """
        Return an absolute version of this path by prepending the current
                working directory. No normalization or symlink resolution is performed.
        
                Use resolve() to get the canonical path to a file.
        """
        pass

    def chmod(self, mode, *, follow_symlinks=True): # reliably restored by inspect
        """ Change the permissions of the path, like os.chmod(). """
        pass

    @classmethod
    def cwd(cls): # real signature unknown; restored from __doc__
        """
        Return a new path pointing to the current working directory
                (as returned by os.getcwd()).
        """
        pass

    def exists(self): # reliably restored by inspect
        """ Whether this path exists. """
        pass

    def expanduser(self): # reliably restored by inspect
        """
        Return a new path with expanded ~ and ~user constructs
                (as returned by os.path.expanduser)
        """
        pass

    def glob(self, pattern): # reliably restored by inspect
        """
        Iterate over this subtree and yield all existing files (of any
                kind, including directories) matching the given relative pattern.
        """
        pass

    def group(self): # reliably restored by inspect
        """ Return the group name of the file gid. """
        pass

    def hardlink_to(self, target): # reliably restored by inspect
        """
        Make this path a hard link pointing to the same file as *target*.
        
                Note the order of arguments (self, target) is the reverse of os.link's.
        """
        pass

    @classmethod
    def home(cls, *args, **kwargs): # real signature unknown
        """
        Return a new path pointing to the user's home directory (as
                returned by os.path.expanduser('~')).
        """
        pass

    def is_block_device(self): # reliably restored by inspect
        """ Whether this path is a block device. """
        pass

    def is_char_device(self): # reliably restored by inspect
        """ Whether this path is a character device. """
        pass

    def is_dir(self): # reliably restored by inspect
        """ Whether this path is a directory. """
        pass

    def is_fifo(self): # reliably restored by inspect
        """ Whether this path is a FIFO. """
        pass

    def is_file(self): # reliably restored by inspect
        """
        Whether this path is a regular file (also True for symlinks pointing
                to regular files).
        """
        pass

    def is_mount(self): # reliably restored by inspect
        """ Check if this path is a POSIX mount point """
        pass

    def is_socket(self): # reliably restored by inspect
        """ Whether this path is a socket. """
        pass

    def is_symlink(self): # reliably restored by inspect
        """ Whether this path is a symbolic link. """
        pass

    def iterdir(self): # reliably restored by inspect
        """
        Iterate over the files in this directory.  Does not yield any
                result for the special paths '.' and '..'.
        """
        pass

    def lchmod(self, mode): # reliably restored by inspect
        """
        Like chmod(), except if the path points to a symlink, the symlink's
                permissions are changed, rather than its target's.
        """
        pass

    def link_to(self, target): # reliably restored by inspect
        """
        Make the target path a hard link pointing to this path.
        
                Note this function does not make this path a hard link to *target*,
                despite the implication of the function and argument names. The order
                of arguments (target, link) is the reverse of Path.symlink_to, but
                matches that of os.link.
        
                Deprecated since Python 3.10 and scheduled for removal in Python 3.12.
                Use `hardlink_to()` instead.
        """
        pass

    def lstat(self): # reliably restored by inspect
        """
        Like stat(), except if the path points to a symlink, the symlink's
                status information is returned, rather than its target's.
        """
        pass

    def mkdir(self, mode=511, parents=False, exist_ok=False): # reliably restored by inspect
        """ Create a new directory at this given path. """
        pass

    def open(self, mode=None, buffering=-1, encoding=None, errors=None, newline=None): # reliably restored by inspect
        """
        Open the file pointed by this path and return a file object, as
                the built-in open() function does.
        """
        pass

    def owner(self): # reliably restored by inspect
        """ Return the login name of the file owner. """
        pass

    def readlink(self): # reliably restored by inspect
        """ Return the path to which the symbolic link points. """
        pass

    def read_bytes(self): # reliably restored by inspect
        """ Open the file in bytes mode, read it, and close the file. """
        pass

    def read_text(self, encoding=None, errors=None): # reliably restored by inspect
        """ Open the file in text mode, read it, and close the file. """
        pass

    def rename(self, target): # reliably restored by inspect
        """
        Rename this path to the target path.
        
                The target path may be absolute or relative. Relative paths are
                interpreted relative to the current working directory, *not* the
                directory of the Path object.
        
                Returns the new Path instance pointing to the target path.
        """
        pass

    def replace(self, target): # reliably restored by inspect
        """
        Rename this path to the target path, overwriting if that path exists.
        
                The target path may be absolute or relative. Relative paths are
                interpreted relative to the current working directory, *not* the
                directory of the Path object.
        
                Returns the new Path instance pointing to the target path.
        """
        pass

    def resolve(self, strict=False): # reliably restored by inspect
        """
        Make the path absolute, resolving all symlinks on the way and also
                normalizing it.
        """
        pass

    def rglob(self, pattern): # reliably restored by inspect
        """
        Recursively yield all existing files (of any kind, including
                directories) matching the given relative pattern, anywhere in
                this subtree.
        """
        pass

    def rmdir(self): # reliably restored by inspect
        """ Remove this directory.  The directory must be empty. """
        pass

    def samefile(self, other_path): # reliably restored by inspect
        """
        Return whether other_path is the same or not as this file
                (as returned by os.path.samefile()).
        """
        pass

    def stat(self, *, follow_symlinks=True): # reliably restored by inspect
        """
        Return the result of the stat() system call on this path, like
                os.stat() does.
        """
        pass

    def symlink_to(self, target, target_is_directory=False): # reliably restored by inspect
        """
        Make this path a symlink pointing to the target path.
                Note the order of arguments (link, target) is the reverse of os.symlink.
        """
        pass

    def touch(self, mode=438, exist_ok=True): # reliably restored by inspect
        """ Create this file with the given access mode, if it doesn't exist. """
        pass

    def unlink(self, missing_ok=False): # reliably restored by inspect
        """
        Remove this file or link.
                If the path is a directory, use rmdir() instead.
        """
        pass

    def write_bytes(self, data): # reliably restored by inspect
        """ Open the file in bytes mode, write to it, and close the file. """
        pass

    def write_text(self, data, encoding=None, errors=None, newline=None): # reliably restored by inspect
        """ Open the file in text mode, write to it, and close the file. """
        pass

    def _make_child_relpath(self, part): # reliably restored by inspect
        # no doc
        pass

    def _scandir(self): # reliably restored by inspect
        # no doc
        pass

    def __enter__(self): # reliably restored by inspect
        # no doc
        pass

    def __exit__(self, t, v, tb): # reliably restored by inspect
        # no doc
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(cls, *args, **kwargs): # reliably restored by inspect
        # no doc
        pass

    __slots__ = ()


class PathSpec(object):
    """
    The :class:`PathSpec` class is a wrapper around a list of compiled
    	:class:`.Pattern` instances.
    """
    def check_file(self, file, separators=None): # reliably restored by inspect
        """
        Check the files against this path-spec.
        
        		*file* (:class:`str` or :class:`os.PathLike`) is the file path to be
        		matched against :attr:`self.patterns <PathSpec.patterns>`.
        
        		*separators* (:class:`~collections.abc.Collection` of :class:`str`; or
        		:data:`None`) optionally contains the path separators to normalize. See
        		:func:`~pathspec.util.normalize_file` for more information.
        
        		Returns the file check result (:class:`~pathspec.util.CheckResult`).
        """
        pass

    def check_files(self, files, separators=None): # reliably restored by inspect
        """
        Check the files against this path-spec.
        
        		*files* (:class:`~collections.abc.Iterable` of :class:`str` or
        		:class:`os.PathLike`) contains the file paths to be checked against
        		:attr:`self.patterns <PathSpec.patterns>`.
        
        		*separators* (:class:`~collections.abc.Collection` of :class:`str`; or
        		:data:`None`) optionally contains the path separators to normalize. See
        		:func:`~pathspec.util.normalize_file` for more information.
        
        		Returns an :class:`~collections.abc.Iterator` yielding each file check
        		result (:class:`~pathspec.util.CheckResult`).
        """
        pass

    def check_tree_files(self, root, on_error=None, follow_links=None): # reliably restored by inspect
        """
        Walks the specified root path for all files and checks them against this
        		path-spec.
        
        		*root* (:class:`str` or :class:`os.PathLike`) is the root directory to
        		search for files.
        
        		*on_error* (:class:`~collections.abc.Callable` or :data:`None`) optionally
        		is the error handler for file-system exceptions. It will be called with the
        		exception (:exc:`OSError`). Reraise the exception to abort the walk. Default
        		is :data:`None` to ignore file-system exceptions.
        
        		*follow_links* (:class:`bool` or :data:`None`) optionally is whether to walk
        		symbolic links that resolve to directories. Default is :data:`None` for
        		:data:`True`.
        
        		*negate* (:class:`bool` or :data:`None`) is whether to negate the match
        		results of the patterns. If :data:`True`, a pattern matching a file will
        		exclude the file rather than include it. Default is :data:`None` for
        		:data:`False`.
        
        		Returns an :class:`~collections.abc.Iterator` yielding each file check
        		result (:class:`~pathspec.util.CheckResult`).
        """
        pass

    @classmethod
    def from_lines(cls, *args, **kwargs): # real signature unknown
        """
        Compiles the pattern lines.
        
        		*pattern_factory* can be either the name of a registered pattern factory
        		(:class:`str`), or a :class:`~collections.abc.Callable` used to compile
        		patterns. It must accept an uncompiled pattern (:class:`str`) and return the
        		compiled pattern (:class:`.Pattern`).
        
        		*lines* (:class:`~collections.abc.Iterable`) yields each uncompiled pattern
        		(:class:`str`). This simply has to yield each line so that it can be a
        		:class:`io.TextIOBase` (e.g., from :func:`open` or :class:`io.StringIO`) or
        		the result from :meth:`str.splitlines`.
        
        		Returns the :class:`PathSpec` instance.
        """
        pass

    def match_entries(self, entries, separators=None, *, negate=None): # reliably restored by inspect
        """
        Matches the entries to this path-spec.
        
        		*entries* (:class:`~collections.abc.Iterable` of :class:`~pathspec.util.TreeEntry`)
        		contains the entries to be matched against :attr:`self.patterns <PathSpec.patterns>`.
        
        		*separators* (:class:`~collections.abc.Collection` of :class:`str`; or
        		:data:`None`) optionally contains the path separators to normalize. See
        		:func:`~pathspec.util.normalize_file` for more information.
        
        		*negate* (:class:`bool` or :data:`None`) is whether to negate the match
        		results of the patterns. If :data:`True`, a pattern matching a file will
        		exclude the file rather than include it. Default is :data:`None` for
        		:data:`False`.
        
        		Returns the matched entries (:class:`~collections.abc.Iterator` of
        		:class:`~pathspec.util.TreeEntry`).
        """
        pass

    def match_file(self, file, separators=None): # reliably restored by inspect
        """
        Matches the file to this path-spec.
        
        		*file* (:class:`str` or :class:`os.PathLike`) is the file path to be
        		matched against :attr:`self.patterns <PathSpec.patterns>`.
        
        		*separators* (:class:`~collections.abc.Collection` of :class:`str`)
        		optionally contains the path separators to normalize. See
        		:func:`~pathspec.util.normalize_file` for more information.
        
        		Returns :data:`True` if *file* matched; otherwise, :data:`False`.
        """
        pass

    def match_files(self, files, separators=None, *, negate=None): # reliably restored by inspect
        """
        Matches the files to this path-spec.
        
        		*files* (:class:`~collections.abc.Iterable` of :class:`str` or
        		:class:`os.PathLike`) contains the file paths to be matched against
        		:attr:`self.patterns <PathSpec.patterns>`.
        
        		*separators* (:class:`~collections.abc.Collection` of :class:`str`; or
        		:data:`None`) optionally contains the path separators to normalize. See
        		:func:`~pathspec.util.normalize_file` for more information.
        
        		*negate* (:class:`bool` or :data:`None`) is whether to negate the match
        		results of the patterns. If :data:`True`, a pattern matching a file will
        		exclude the file rather than include it. Default is :data:`None` for
        		:data:`False`.
        
        		Returns the matched files (:class:`~collections.abc.Iterator` of
        		:class:`str` or :class:`os.PathLike`).
        """
        pass

    def match_tree(self, root, on_error=None, follow_links=None, *, negate=None): # reliably restored by inspect
        """
        Walks the specified root path for all files and matches them to this
        		path-spec.
        
        		*root* (:class:`str` or :class:`os.PathLike`) is the root directory to
        		search for files.
        
        		*on_error* (:class:`~collections.abc.Callable` or :data:`None`) optionally
        		is the error handler for file-system exceptions. It will be called with the
        		exception (:exc:`OSError`). Reraise the exception to abort the walk. Default
        		is :data:`None` to ignore file-system exceptions.
        
        		*follow_links* (:class:`bool` or :data:`None`) optionally is whether to walk
        		symbolic links that resolve to directories. Default is :data:`None` for
        		:data:`True`.
        
        		*negate* (:class:`bool` or :data:`None`) is whether to negate the match
        		results of the patterns. If :data:`True`, a pattern matching a file will
        		exclude the file rather than include it. Default is :data:`None` for
        		:data:`False`.
        
        		Returns the matched files (:class:`~collections.abc.Iterable` of
        		:class:`str`).
        """
        pass

    def match_tree_entries(self, root, on_error=None, follow_links=None, *, negate=None): # reliably restored by inspect
        """
        Walks the specified root path for all files and matches them to this
        		path-spec.
        
        		*root* (:class:`str` or :class:`os.PathLike`) is the root directory to
        		search.
        
        		*on_error* (:class:`~collections.abc.Callable` or :data:`None`) optionally
        		is the error handler for file-system exceptions. It will be called with the
        		exception (:exc:`OSError`). Reraise the exception to abort the walk. Default
        		is :data:`None` to ignore file-system exceptions.
        
        		*follow_links* (:class:`bool` or :data:`None`) optionally is whether to walk
        		symbolic links that resolve to directories. Default is :data:`None` for
        		:data:`True`.
        
        		*negate* (:class:`bool` or :data:`None`) is whether to negate the match
        		results of the patterns. If :data:`True`, a pattern matching a file will
        		exclude the file rather than include it. Default is :data:`None` for
        		:data:`False`.
        
        		Returns the matched files (:class:`~collections.abc.Iterator` of
        		:class:`.TreeEntry`).
        """
        pass

    def match_tree_files(self, root, on_error=None, follow_links=None, *, negate=None): # reliably restored by inspect
        """
        Walks the specified root path for all files and matches them to this
        		path-spec.
        
        		*root* (:class:`str` or :class:`os.PathLike`) is the root directory to
        		search for files.
        
        		*on_error* (:class:`~collections.abc.Callable` or :data:`None`) optionally
        		is the error handler for file-system exceptions. It will be called with the
        		exception (:exc:`OSError`). Reraise the exception to abort the walk. Default
        		is :data:`None` to ignore file-system exceptions.
        
        		*follow_links* (:class:`bool` or :data:`None`) optionally is whether to walk
        		symbolic links that resolve to directories. Default is :data:`None` for
        		:data:`True`.
        
        		*negate* (:class:`bool` or :data:`None`) is whether to negate the match
        		results of the patterns. If :data:`True`, a pattern matching a file will
        		exclude the file rather than include it. Default is :data:`None` for
        		:data:`False`.
        
        		Returns the matched files (:class:`~collections.abc.Iterable` of
        		:class:`str`).
        """
        pass

    def _match_file(patterns, file): # reliably restored by inspect
        """
        Check the file against the patterns.
        
        	*patterns* (:class:`~collections.abc.Iterable`) yields each indexed pattern
        	(:class:`tuple`) which contains the pattern index (:class:`int`) and actual
        	pattern (:class:`~pathspec.pattern.Pattern`).
        
        	*file* (:class:`str`) is the normalized file path to be matched
        	against *patterns*.
        
        	Returns a :class:`tuple` containing whether to include *file* (:class:`bool`
        	or :data:`None`), and the index of the last matched pattern (:class:`int` or
        	:data:`None`).
        """
        pass

    def __add__(self, other): # reliably restored by inspect
        """
        Combines the :attr:`Pathspec.patterns` patterns from two
        		:class:`PathSpec` instances.
        """
        pass

    def __eq__(self, other): # reliably restored by inspect
        """
        Tests the equality of this path-spec with *other* (:class:`PathSpec`)
        		by comparing their :attr:`~PathSpec.patterns` attributes.
        """
        pass

    def __iadd__(self, other): # reliably restored by inspect
        """
        Adds the :attr:`Pathspec.patterns` patterns from one :class:`PathSpec`
        		instance to this instance.
        """
        pass

    def __init__(self, patterns): # reliably restored by inspect
        """
        Initializes the :class:`PathSpec` instance.
        
        		*patterns* (:class:`~collections.abc.Collection` or :class:`~collections.abc.Iterable`)
        		yields each compiled pattern (:class:`.Pattern`).
        """
        pass

    def __len__(self): # reliably restored by inspect
        """
        Returns the number of compiled patterns this path-spec contains
        		(:class:`int`).
        """
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """list of weak references to the object (if defined)"""


    __dict__ = None # (!) real value is "mappingproxy({'__module__': 'pathspec.pathspec', '__doc__': '\\n\\tThe :class:`PathSpec` class is a wrapper around a list of compiled\\n\\t:class:`.Pattern` instances.\\n\\t', '__init__': <function PathSpec.__init__ at 0x00000224FE924900>, '__eq__': <function PathSpec.__eq__ at 0x00000224FE926200>, '__len__': <function PathSpec.__len__ at 0x00000224FE927060>, '__add__': <function PathSpec.__add__ at 0x00000224FE927100>, '__iadd__': <function PathSpec.__iadd__ at 0x00000224FE9271A0>, 'check_file': <function PathSpec.check_file at 0x00000224FE927240>, 'check_files': <function PathSpec.check_files at 0x00000224FE9272E0>, 'check_tree_files': <function PathSpec.check_tree_files at 0x00000224FE927380>, 'from_lines': <classmethod(<function PathSpec.from_lines at 0x00000224FE927420>)>, 'match_entries': <function PathSpec.match_entries at 0x00000224FE9274C0>, '_match_file': <staticmethod(<function check_match_file at 0x00000224FE924FE0>)>, 'match_file': <function PathSpec.match_file at 0x00000224FE927560>, 'match_files': <function PathSpec.match_files at 0x00000224FE927600>, 'match_tree_entries': <function PathSpec.match_tree_entries at 0x00000224FE9276A0>, 'match_tree_files': <function PathSpec.match_tree_files at 0x00000224FE927740>, 'match_tree': <function PathSpec.match_tree_files at 0x00000224FE927740>, '__dict__': <attribute '__dict__' of 'PathSpec' objects>, '__weakref__': <attribute '__weakref__' of 'PathSpec' objects>, '__hash__': None})"
    __hash__ = None


class Report(object):
    """ Provides a reformatting counter. Can be rendered with `str(report)`. """
    def done(self, src, changed): # reliably restored by inspect
        """ Increment the counter for successful reformatting. Write out a message. """
        pass

    def failed(self, src, message): # reliably restored by inspect
        """ Increment the counter for failed reformatting. Write out a message. """
        pass

    def path_ignored(self, path, message): # reliably restored by inspect
        # no doc
        pass

    def __eq__(self, other): # reliably restored by inspect
        # no doc
        pass

    def __init__(self, check=False, diff=False, quiet=False, verbose=False, change_count=0, same_count=0, failure_count=0): # reliably restored by inspect
        # no doc
        pass

    def __repr__(self): # reliably restored by inspect
        # no doc
        pass

    def __str__(self): # reliably restored by inspect
        """
        Render a color report of the current state.
        
                Use `click.unstyle` to remove colors.
        """
        pass

    return_code = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Return the exit code that the app should use.

        This considers the current state of changed files and failures:
        - if there were any failures, return 123;
        - if any files were changed and --check is being used, return 1;
        - otherwise return 0.
        """

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """list of weak references to the object (if defined)"""


    change_count = 0
    check = False
    diff = False
    failure_count = 0
    quiet = False
    same_count = 0
    verbose = False
    __annotations__ = {
        'change_count': int,
        'check': bool,
        'diff': '<value is a self-reference, replaced by this string>',
        'failure_count': '<value is a self-reference, replaced by this string>',
        'quiet': '<value is a self-reference, replaced by this string>',
        'same_count': '<value is a self-reference, replaced by this string>',
        'verbose': '<value is a self-reference, replaced by this string>',
    }
    __dataclass_fields__ = {
        'change_count': None, # (!) real value is "Field(name='change_count',type=<class 'int'>,default=0,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'check': None, # (!) real value is "Field(name='check',type=<class 'bool'>,default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'diff': None, # (!) real value is "Field(name='diff',type=<class 'bool'>,default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'failure_count': None, # (!) real value is "Field(name='failure_count',type=<class 'int'>,default=0,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'quiet': None, # (!) real value is "Field(name='quiet',type=<class 'bool'>,default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'same_count': None, # (!) real value is "Field(name='same_count',type=<class 'int'>,default=0,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'verbose': None, # (!) real value is "Field(name='verbose',type=<class 'bool'>,default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
    }
    __dataclass_params__ = _DataclassParams(init=True,repr=True,eq=True,order=False,unsafe_hash=False,frozen=False)
    __dict__ = None # (!) real value is "mappingproxy({'__module__': 'black.report', '__annotations__': {'check': <class 'bool'>, 'diff': <class 'bool'>, 'quiet': <class 'bool'>, 'verbose': <class 'bool'>, 'change_count': <class 'int'>, 'same_count': <class 'int'>, 'failure_count': <class 'int'>}, '__doc__': 'Provides a reformatting counter. Can be rendered with `str(report)`.', 'check': False, 'diff': False, 'quiet': False, 'verbose': False, 'change_count': 0, 'same_count': 0, 'failure_count': 0, 'done': <function Report.done at 0x00000224FEEDC720>, 'failed': <function Report.failed at 0x00000224FEEDC7C0>, 'path_ignored': <function Report.path_ignored at 0x00000224FEEDC860>, 'return_code': <property object at 0x00000224FEEC7420>, '__str__': <function Report.__str__ at 0x00000224FEEDC9A0>, '__dict__': <attribute '__dict__' of 'Report' objects>, '__weakref__': <attribute '__weakref__' of 'Report' objects>, '__dataclass_params__': _DataclassParams(init=True,repr=True,eq=True,order=False,unsafe_hash=False,frozen=False), '__dataclass_fields__': {'check': Field(name='check',type=<class 'bool'>,default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), 'diff': Field(name='diff',type=<class 'bool'>,default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), 'quiet': Field(name='quiet',type=<class 'bool'>,default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), 'verbose': Field(name='verbose',type=<class 'bool'>,default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), 'change_count': Field(name='change_count',type=<class 'int'>,default=0,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), 'same_count': Field(name='same_count',type=<class 'int'>,default=0,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), 'failure_count': Field(name='failure_count',type=<class 'int'>,default=0,default_factory=<dataclasses._MISSING_TYPE object at 0x00000224FE7647D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)}, '__init__': <function Report.__init__ at 0x00000224FEEDCB80>, '__repr__': <function Report.__repr__ at 0x00000224FEEDCA40>, '__eq__': <function Report.__eq__ at 0x00000224FEEDCC20>, '__hash__': None, '__match_args__': ('check', 'diff', 'quiet', 'verbose', 'change_count', 'same_count', 'failure_count')})"
    __hash__ = None
    __match_args__ = (
        'check',
        'diff',
        'quiet',
        'verbose',
        'change_count',
        'same_count',
        'failure_count',
    )


class timezone(__datetime.tzinfo):
    """ Fixed offset from UTC implementation of tzinfo. """
    def dst(self, *args, **kwargs): # real signature unknown
        """ Return None. """
        pass

    def fromutc(self, *args, **kwargs): # real signature unknown
        """ datetime in UTC -> datetime in local time. """
        pass

    def tzname(self, *args, **kwargs): # real signature unknown
        """ If name is specified when timezone is created, returns the name.  Otherwise returns offset as 'UTC(+|-)HH:MM'. """
        pass

    def utcoffset(self, *args, **kwargs): # real signature unknown
        """ Return fixed offset. """
        pass

    def __eq__(self, *args, **kwargs): # real signature unknown
        """ Return self==value. """
        pass

    def __getinitargs__(self, *args, **kwargs): # real signature unknown
        """ pickle support """
        pass

    def __ge__(self, *args, **kwargs): # real signature unknown
        """ Return self>=value. """
        pass

    def __gt__(self, *args, **kwargs): # real signature unknown
        """ Return self>value. """
        pass

    def __hash__(self, *args, **kwargs): # real signature unknown
        """ Return hash(self). """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __le__(self, *args, **kwargs): # real signature unknown
        """ Return self<=value. """
        pass

    def __lt__(self, *args, **kwargs): # real signature unknown
        """ Return self<value. """
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __ne__(self, *args, **kwargs): # real signature unknown
        """ Return self!=value. """
        pass

    def __repr__(self, *args, **kwargs): # real signature unknown
        """ Return repr(self). """
        pass

    def __str__(self, *args, **kwargs): # real signature unknown
        """ Return str(self). """
        pass

    max = datetime.timezone(datetime.timedelta(seconds=86340))
    min = datetime.timezone(datetime.timedelta(days=-1, seconds=60))
    utc = datetime.timezone.utc


class WriteBack(__enum.Enum):
    """ mypyc filler docstring """
    @classmethod
    def from_configuration(cls, *args, **kwargs): # real signature unknown
        pass

    def _generate_next_value_(name, start, count, last_values): # reliably restored by inspect
        """
        Generate the next value when not given.
        
                name: the name of the member
                start: the initial start value or None
                count: the number of existing members
                last_values: the list of values assigned
        """
        pass

    def _new_member_(self, *args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __init__(self, *args, **kwds): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(cls, value): # reliably restored by inspect
        # no doc
        pass

    CHECK = None # (!) real value is '<WriteBack.CHECK: 3>'
    COLOR_DIFF = None # (!) real value is '<WriteBack.COLOR_DIFF: 4>'
    DIFF = None # (!) real value is '<WriteBack.DIFF: 2>'
    NO = None # (!) real value is '<WriteBack.NO: 0>'
    YES = None # (!) real value is '<WriteBack.YES: 1>'
    _member_map_ = {
        'CHECK': None, # (!) real value is '<WriteBack.CHECK: 3>'
        'COLOR_DIFF': None, # (!) real value is '<WriteBack.COLOR_DIFF: 4>'
        'DIFF': None, # (!) real value is '<WriteBack.DIFF: 2>'
        'NO': None, # (!) real value is '<WriteBack.NO: 0>'
        'YES': None, # (!) real value is '<WriteBack.YES: 1>'
    }
    _member_names_ = [
        'NO',
        'YES',
        'DIFF',
        'CHECK',
        'COLOR_DIFF',
    ]
    _member_type_ = object
    _unhashable_values_ = []
    _use_args_ = False
    _value2member_map_ = {
        0: None, # (!) real value is '<WriteBack.NO: 0>'
        1: None, # (!) real value is '<WriteBack.YES: 1>'
        2: None, # (!) real value is '<WriteBack.DIFF: 2>'
        3: None, # (!) real value is '<WriteBack.CHECK: 3>'
        4: None, # (!) real value is '<WriteBack.COLOR_DIFF: 4>'
    }
    _value_repr_ = None
    __annotations__ = {
        'CHECK': int,
        'COLOR_DIFF': '<value is a self-reference, replaced by this string>',
        'DIFF': '<value is a self-reference, replaced by this string>',
        'NO': '<value is a self-reference, replaced by this string>',
        'YES': '<value is a self-reference, replaced by this string>',
    }


# variables with complex values

FUTURE_FLAG_TO_FEATURE = mode.FUTURE_FLAG_TO_FEATURE

PYTHON_CELL_MAGICS = handle_ipynb_magics.PYTHON_CELL_MAGICS

STARS = nodes.STARS

TRANSFORMED_MAGICS = handle_ipynb_magics.TRANSFORMED_MAGICS

VERSION_TO_FEATURES = mode.VERSION_TO_FEATURES

__loader__ = __init__.__loader__

__path__ = __init__.__path__

__spec__ = __init__.__spec__

