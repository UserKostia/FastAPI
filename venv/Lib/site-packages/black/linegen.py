# encoding: utf-8
# module black.linegen
# from C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\linegen.cp311-win_amd64.pyd
# by generator 1.147
# no doc

# imports
import re as re # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\re\__init__.py
import sys as sys # <module 'sys' (built-in)>
import blib2to3.pgen2.token as token # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\blib2to3\pgen2\token.cp311-win_amd64.pyd
from black.brackets import (get_leaves_inside_matching_brackets, 
    max_delimiter_priority_in_atom)

from black.comments import generate_comments, list_comments

from black.lines import (Line, RHSResult, append_leaves, can_be_split, 
    can_omit_invisible_parens, is_line_short_enough, line_to_string)

from black.mode import Feature, Mode, Preview

from black.nodes import (Visitor, ensure_visible, fstring_to_string, 
    get_annotation_type, is_arith_like, is_async_stmt_or_funcdef, 
    is_atom_with_invisible_parens, is_docstring, is_empty_tuple, 
    is_lpar_token, is_multiline_string, is_name_token, 
    is_one_sequence_between, is_one_tuple, is_parent_function_or_class, 
    is_part_of_annotation, is_rpar_token, is_stub_body, is_stub_suite, 
    is_tuple_containing_walrus, is_type_ignore_comment_string, is_vararg, 
    is_walrus_assignment, is_yield, wrap_in_parentheses)

from black.numerics import normalize_numeric_literal

from black.strings import (fix_docstring, get_string_prefix, 
    normalize_string_prefix, normalize_string_quotes, 
    normalize_unicode_escape_sequences)

from black.trans import (CannotTransform, StringMerger, StringParenStripper, 
    StringParenWrapper, StringSplitter, hug_power_op)

from blib2to3.pygram import syms

from blib2to3.pytree import Leaf, Node

import black.nodes as __black_nodes
import black.trans as __black_trans
import enum as __enum


# Variables with simple values

COMMA_PRIORITY = 18

DOT_PRIORITY = 1

STANDALONE_COMMENT = 153

STRING_PRIORITY = 12

# functions

def bracket_split_build_line(*args, **kwargs): # real signature unknown
    pass

def bracket_split_succeeded_or_raise(*args, **kwargs): # real signature unknown
    pass

def cast(typ, val): # reliably restored by inspect
    """
    Cast a value to a type.
    
        This returns the value unchanged.  To the type checker this
        signals that the return value has the designated type, but at
        runtime we intentionally don't check anything (we want this
        to be as fast as possible).
    """
    pass

def Collection(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Collection. """
    pass

def delimiter_split(*args, **kwargs): # real signature unknown
    pass

def dont_increase_indentation(*args, **kwargs): # real signature unknown
    pass

def generate_trailers_to_omit(*args, **kwargs): # real signature unknown
    pass

def Iterator(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Iterator. """
    pass

def left_hand_split(*args, **kwargs): # real signature unknown
    pass

def List(*args, **kwargs): # real signature unknown
    """ A generic version of list. """
    pass

def LN(*args, **kwargs): # real signature unknown
    pass

def maybe_make_parens_invisible_in_atom(*args, **kwargs): # real signature unknown
    pass

def normalize_invisible_parens(*args, **kwargs): # real signature unknown
    pass

def Optional(*args, **kwargs): # real signature unknown
    """ Optional[X] is equivalent to Union[X, None]. """
    pass

def remove_await_parens(*args, **kwargs): # real signature unknown
    pass

def remove_with_parens(*args, **kwargs): # real signature unknown
    pass

def replace(obj, **changes): # reliably restored by inspect
    """
    Return a new object replacing specified fields with new values.
    
        This is especially useful for frozen classes.  Example usage::
    
          @dataclass(frozen=True)
          class C:
              x: int
              y: int
    
          c = C(1, 2)
          c1 = replace(c, x=3)
          assert c1.x == 3 and c1.y == 2
    """
    pass

def right_hand_split(*args, **kwargs): # real signature unknown
    pass

def run_transformer(*args, **kwargs): # real signature unknown
    pass

def Set(*args, **kwargs): # real signature unknown
    """ A generic version of set. """
    pass

def should_split_funcdef_with_rhs(*args, **kwargs): # real signature unknown
    pass

def should_split_line(*args, **kwargs): # real signature unknown
    pass

def split_wrapper(*args, **kwargs): # real signature unknown
    pass

def standalone_comment_split(*args, **kwargs): # real signature unknown
    pass

def Transformer(*args, **kwargs): # real signature unknown
    pass

def transform_line(*args, **kwargs): # real signature unknown
    pass

def Union(*args, **kwargs): # real signature unknown
    """
    Union type; Union[X, Y] means either X or Y.
    
        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].
    
        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::
    
            assert Union[Union[int, str], float] == Union[int, str, float]
    
        - Unions of a single argument vanish, e.g.::
    
            assert Union[int] == int  # The constructor actually returns int
    
        - Redundant arguments are skipped, e.g.::
    
            assert Union[int, str, int] == Union[int, str]
    
        - When comparing unions, the argument order is ignored, e.g.::
    
            assert Union[int, str] == Union[str, int]
    
        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].
    """
    pass

def wraps(wrapped, assigned="('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')", updated="('__dict__',)"): # reliably restored by inspect
    """
    Decorator factory to apply update_wrapper() to a wrapper function
    
           Returns a decorator that invokes update_wrapper() with the decorated
           function as the wrapper argument and the arguments to wraps() as the
           remaining arguments. Default arguments are as for update_wrapper().
           This is a convenience function to simplify applying partial() to
           update_wrapper().
    """
    pass

def _can_add_trailing_comma(*args, **kwargs): # real signature unknown
    pass

def _first_right_hand_split(*args, **kwargs): # real signature unknown
    pass

def _get_last_non_comment_leaf(*args, **kwargs): # real signature unknown
    pass

def _hugging_power_ops_line_to_string(*args, **kwargs): # real signature unknown
    pass

def _maybe_split_omitting_optional_parens(*args, **kwargs): # real signature unknown
    pass

def _maybe_wrap_cms_in_parens(*args, **kwargs): # real signature unknown
    pass

def _normalize_import_from(*args, **kwargs): # real signature unknown
    pass

def _prefer_split_rhs_oop_over_rhs(*args, **kwargs): # real signature unknown
    pass

def _safe_add_trailing_comma(*args, **kwargs): # real signature unknown
    pass

# classes

class auto(object):
    """ Instances are replaced with an appropriate value in Enum class suites. """
    def __init__(self, value='_auto_null'): # reliably restored by inspect
        # no doc
        pass

    def __repr__(self): # reliably restored by inspect
        # no doc
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """list of weak references to the object (if defined)"""


    __dict__ = None # (!) real value is "mappingproxy({'__module__': 'enum', '__doc__': '\\n    Instances are replaced with an appropriate value in Enum class suites.\\n    ', '__init__': <function auto.__init__ at 0x0000026B946A9300>, '__repr__': <function auto.__repr__ at 0x0000026B946A93A0>, '__dict__': <attribute '__dict__' of 'auto' objects>, '__weakref__': <attribute '__weakref__' of 'auto' objects>})"


class CannotSplit(__black_trans.CannotTransform):
    # no doc
    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __dict__ = None # (!) real value is "mappingproxy({'__setstate__': <method '__setstate__' of 'CannotSplit' objects>, '__getstate__': <method '__getstate__' of 'CannotSplit' objects>, '__dict__': <member '__dict__' of 'CannotSplit' objects>, '__weakref__': <member '__weakref__' of 'CannotSplit' objects>, '__doc__': None, '__module__': 'black.linegen', '__mypyc_attrs__': ('__dict__',)})"
    __mypyc_attrs__ = (
        '__dict__',
    )


class Enum(object):
    """
    Create a collection of name/value pairs.
    
        Example enumeration:
    
        >>> class Color(Enum):
        ...     RED = 1
        ...     BLUE = 2
        ...     GREEN = 3
    
        Access them by:
    
        - attribute access::
    
        >>> Color.RED
        <Color.RED: 1>
    
        - value lookup:
    
        >>> Color(1)
        <Color.RED: 1>
    
        - name lookup:
    
        >>> Color['RED']
        <Color.RED: 1>
    
        Enumerations can be iterated over, and know how many members they have:
    
        >>> len(Color)
        3
    
        >>> list(Color)
        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]
    
        Methods can be added to enumerations, and members can have their own
        attributes -- see the documentation for details.
    """
    def _generate_next_value_(name, start, count, last_values): # reliably restored by inspect
        """
        Generate the next value when not given.
        
                name: the name of the member
                start: the initial start value or None
                count: the number of existing members
                last_values: the list of values assigned
        """
        pass

    @classmethod
    def _missing_(cls, *args, **kwargs): # real signature unknown
        pass

    def _new_member_(cls, value): # reliably restored by inspect
        # no doc
        pass

    def __dir__(self): # reliably restored by inspect
        """ Returns all members and all public methods """
        pass

    def __format__(self, format_spec): # reliably restored by inspect
        # no doc
        pass

    def __hash__(self): # reliably restored by inspect
        # no doc
        pass

    def __init__(self, *args, **kwds): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(cls, value): # reliably restored by inspect
        # no doc
        pass

    def __reduce_ex__(self, proto): # reliably restored by inspect
        # no doc
        pass

    def __repr__(self): # reliably restored by inspect
        # no doc
        pass

    def __str__(self): # reliably restored by inspect
        # no doc
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """list of weak references to the object (if defined)"""


    name = None # (!) real value is '<enum.property object at 0x0000026B948C2F90>'
    value = None # (!) real value is '<enum.property object at 0x0000026B948C30D0>'
    _member_map_ = {}
    _member_names_ = []
    _member_type_ = object
    _unhashable_values_ = []
    _use_args_ = False
    _value2member_map_ = {}
    _value_repr_ = None
    __dict__ = None # (!) real value is 'mappingproxy({\'__module__\': \'enum\', \'__doc__\': "\\n    Create a collection of name/value pairs.\\n\\n    Example enumeration:\\n\\n    >>> class Color(Enum):\\n    ...     RED = 1\\n    ...     BLUE = 2\\n    ...     GREEN = 3\\n\\n    Access them by:\\n\\n    - attribute access::\\n\\n    >>> Color.RED\\n    <Color.RED: 1>\\n\\n    - value lookup:\\n\\n    >>> Color(1)\\n    <Color.RED: 1>\\n\\n    - name lookup:\\n\\n    >>> Color[\'RED\']\\n    <Color.RED: 1>\\n\\n    Enumerations can be iterated over, and know how many members they have:\\n\\n    >>> len(Color)\\n    3\\n\\n    >>> list(Color)\\n    [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\\n\\n    Methods can be added to enumerations, and members can have their own\\n    attributes -- see the documentation for details.\\n    ", \'__new__\': <staticmethod(<function Enum.__new__ at 0x0000026B946AA840>)>, \'__init__\': <function Enum.__init__ at 0x0000026B946AA8E0>, \'_generate_next_value_\': <function Enum._generate_next_value_ at 0x0000026B946AA980>, \'_missing_\': <classmethod(<function Enum._missing_ at 0x0000026B946AAA20>)>, \'__repr__\': <function Enum.__repr__ at 0x0000026B946AAAC0>, \'__str__\': <function Enum.__str__ at 0x0000026B946AAB60>, \'__dir__\': <function Enum.__dir__ at 0x0000026B946AAC00>, \'__format__\': <function Enum.__format__ at 0x0000026B946AACA0>, \'__hash__\': <function Enum.__hash__ at 0x0000026B946AAD40>, \'__reduce_ex__\': <function Enum.__reduce_ex__ at 0x0000026B946AADE0>, \'name\': <enum.property object at 0x0000026B948C2F90>, \'value\': <enum.property object at 0x0000026B948C30D0>, \'_new_member_\': <function Enum.__new__ at 0x0000026B946AA840>, \'_use_args_\': False, \'_member_names_\': [], \'_member_map_\': {}, \'_value2member_map_\': {}, \'_unhashable_values_\': [], \'_member_type_\': <class \'object\'>, \'_value_repr_\': None, \'__dict__\': <attribute \'__dict__\' of \'Enum\' objects>, \'__weakref__\': <attribute \'__weakref__\' of \'Enum\' objects>})'


class LeafID(object):
    """
    int([x]) -> integer
    int(x, base=10) -> integer
    
    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.
    
    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
    """
    def as_integer_ratio(self): # real signature unknown; restored from __doc__
        """
        Return integer ratio.
        
        Return a pair of integers, whose ratio is exactly equal to the original int
        and with a positive denominator.
        
        >>> (10).as_integer_ratio()
        (10, 1)
        >>> (-10).as_integer_ratio()
        (-10, 1)
        >>> (0).as_integer_ratio()
        (0, 1)
        """
        pass

    def bit_count(self): # real signature unknown; restored from __doc__
        """
        Number of ones in the binary representation of the absolute value of self.
        
        Also known as the population count.
        
        >>> bin(13)
        '0b1101'
        >>> (13).bit_count()
        3
        """
        pass

    def bit_length(self): # real signature unknown; restored from __doc__
        """
        Number of bits necessary to represent self in binary.
        
        >>> bin(37)
        '0b100101'
        >>> (37).bit_length()
        6
        """
        pass

    def conjugate(self, *args, **kwargs): # real signature unknown
        """ Returns self, the complex conjugate of any int. """
        pass

    @classmethod
    def from_bytes(cls, *args, **kwargs): # real signature unknown
        """
        Return the integer represented by the given array of bytes.
        
          bytes
            Holds the array of bytes to convert.  The argument must either
            support the buffer protocol or be an iterable object producing bytes.
            Bytes and bytearray are examples of built-in objects that support the
            buffer protocol.
          byteorder
            The byte order used to represent the integer.  If byteorder is 'big',
            the most significant byte is at the beginning of the byte array.  If
            byteorder is 'little', the most significant byte is at the end of the
            byte array.  To request the native byte order of the host system, use
            `sys.byteorder' as the byte order value.  Default is to use 'big'.
          signed
            Indicates whether two's complement is used to represent the integer.
        """
        pass

    def to_bytes(self, *args, **kwargs): # real signature unknown
        """
        Return an array of bytes representing an integer.
        
          length
            Length of bytes object to use.  An OverflowError is raised if the
            integer is not representable with the given number of bytes.  Default
            is length 1.
          byteorder
            The byte order used to represent the integer.  If byteorder is 'big',
            the most significant byte is at the beginning of the byte array.  If
            byteorder is 'little', the most significant byte is at the end of the
            byte array.  To request the native byte order of the host system, use
            `sys.byteorder' as the byte order value.  Default is to use 'big'.
          signed
            Determines whether two's complement is used to represent the integer.
            If signed is False and a negative integer is given, an OverflowError
            is raised.
        """
        pass

    def __abs__(self, *args, **kwargs): # real signature unknown
        """ abs(self) """
        pass

    def __add__(self, *args, **kwargs): # real signature unknown
        """ Return self+value. """
        pass

    def __and__(self, *args, **kwargs): # real signature unknown
        """ Return self&value. """
        pass

    def __bool__(self, *args, **kwargs): # real signature unknown
        """ True if self else False """
        pass

    def __ceil__(self, *args, **kwargs): # real signature unknown
        """ Ceiling of an Integral returns itself. """
        pass

    def __divmod__(self, *args, **kwargs): # real signature unknown
        """ Return divmod(self, value). """
        pass

    def __eq__(self, *args, **kwargs): # real signature unknown
        """ Return self==value. """
        pass

    def __float__(self, *args, **kwargs): # real signature unknown
        """ float(self) """
        pass

    def __floordiv__(self, *args, **kwargs): # real signature unknown
        """ Return self//value. """
        pass

    def __floor__(self, *args, **kwargs): # real signature unknown
        """ Flooring an Integral returns itself. """
        pass

    def __format__(self, *args, **kwargs): # real signature unknown
        pass

    def __getattribute__(self, *args, **kwargs): # real signature unknown
        """ Return getattr(self, name). """
        pass

    def __getnewargs__(self, *args, **kwargs): # real signature unknown
        pass

    def __ge__(self, *args, **kwargs): # real signature unknown
        """ Return self>=value. """
        pass

    def __gt__(self, *args, **kwargs): # real signature unknown
        """ Return self>value. """
        pass

    def __hash__(self, *args, **kwargs): # real signature unknown
        """ Return hash(self). """
        pass

    def __index__(self, *args, **kwargs): # real signature unknown
        """ Return self converted to an integer, if self is suitable for use as an index into a list. """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __int__(self, *args, **kwargs): # real signature unknown
        """ int(self) """
        pass

    def __invert__(self, *args, **kwargs): # real signature unknown
        """ ~self """
        pass

    def __le__(self, *args, **kwargs): # real signature unknown
        """ Return self<=value. """
        pass

    def __lshift__(self, *args, **kwargs): # real signature unknown
        """ Return self<<value. """
        pass

    def __lt__(self, *args, **kwargs): # real signature unknown
        """ Return self<value. """
        pass

    def __mod__(self, *args, **kwargs): # real signature unknown
        """ Return self%value. """
        pass

    def __mul__(self, *args, **kwargs): # real signature unknown
        """ Return self*value. """
        pass

    def __neg__(self, *args, **kwargs): # real signature unknown
        """ -self """
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __ne__(self, *args, **kwargs): # real signature unknown
        """ Return self!=value. """
        pass

    def __or__(self, *args, **kwargs): # real signature unknown
        """ Return self|value. """
        pass

    def __pos__(self, *args, **kwargs): # real signature unknown
        """ +self """
        pass

    def __pow__(self, *args, **kwargs): # real signature unknown
        """ Return pow(self, value, mod). """
        pass

    def __radd__(self, *args, **kwargs): # real signature unknown
        """ Return value+self. """
        pass

    def __rand__(self, *args, **kwargs): # real signature unknown
        """ Return value&self. """
        pass

    def __rdivmod__(self, *args, **kwargs): # real signature unknown
        """ Return divmod(value, self). """
        pass

    def __repr__(self, *args, **kwargs): # real signature unknown
        """ Return repr(self). """
        pass

    def __rfloordiv__(self, *args, **kwargs): # real signature unknown
        """ Return value//self. """
        pass

    def __rlshift__(self, *args, **kwargs): # real signature unknown
        """ Return value<<self. """
        pass

    def __rmod__(self, *args, **kwargs): # real signature unknown
        """ Return value%self. """
        pass

    def __rmul__(self, *args, **kwargs): # real signature unknown
        """ Return value*self. """
        pass

    def __ror__(self, *args, **kwargs): # real signature unknown
        """ Return value|self. """
        pass

    def __round__(self, *args, **kwargs): # real signature unknown
        """
        Rounding an Integral returns itself.
        
        Rounding with an ndigits argument also returns an integer.
        """
        pass

    def __rpow__(self, *args, **kwargs): # real signature unknown
        """ Return pow(value, self, mod). """
        pass

    def __rrshift__(self, *args, **kwargs): # real signature unknown
        """ Return value>>self. """
        pass

    def __rshift__(self, *args, **kwargs): # real signature unknown
        """ Return self>>value. """
        pass

    def __rsub__(self, *args, **kwargs): # real signature unknown
        """ Return value-self. """
        pass

    def __rtruediv__(self, *args, **kwargs): # real signature unknown
        """ Return value/self. """
        pass

    def __rxor__(self, *args, **kwargs): # real signature unknown
        """ Return value^self. """
        pass

    def __sizeof__(self, *args, **kwargs): # real signature unknown
        """ Returns size in memory, in bytes. """
        pass

    def __sub__(self, *args, **kwargs): # real signature unknown
        """ Return self-value. """
        pass

    def __truediv__(self, *args, **kwargs): # real signature unknown
        """ Return self/value. """
        pass

    def __trunc__(self, *args, **kwargs): # real signature unknown
        """ Truncating an Integral returns itself. """
        pass

    def __xor__(self, *args, **kwargs): # real signature unknown
        """ Return self^value. """
        pass

    denominator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the denominator of a rational number in lowest terms"""

    imag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the imaginary part of a complex number"""

    numerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the numerator of a rational number in lowest terms"""

    real = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the real part of a complex number"""



class LineGenerator(__black_nodes.Visitor):
    # no doc
    def line(self, *args, **kwargs): # real signature unknown
        pass

    def visit_async_stmt(self, *args, **kwargs): # real signature unknown
        pass

    def visit_decorators(self, *args, **kwargs): # real signature unknown
        pass

    def visit_DEDENT(self, *args, **kwargs): # real signature unknown
        pass

    def visit_default(self, *args, **kwargs): # real signature unknown
        pass

    def visit_dictsetmaker(self, *args, **kwargs): # real signature unknown
        pass

    def visit_ENDMARKER(self, *args, **kwargs): # real signature unknown
        pass

    def visit_factor(self, *args, **kwargs): # real signature unknown
        pass

    def visit_fstring(self, *args, **kwargs): # real signature unknown
        pass

    def visit_funcdef(self, *args, **kwargs): # real signature unknown
        pass

    def visit_INDENT(self, *args, **kwargs): # real signature unknown
        pass

    def visit_match_case(self, *args, **kwargs): # real signature unknown
        pass

    def visit_NUMBER(self, *args, **kwargs): # real signature unknown
        pass

    def visit_paramspec(self, *args, **kwargs): # real signature unknown
        pass

    def visit_power(self, *args, **kwargs): # real signature unknown
        pass

    def visit_SEMI(self, *args, **kwargs): # real signature unknown
        pass

    def visit_simple_stmt(self, *args, **kwargs): # real signature unknown
        pass

    def visit_STANDALONE_COMMENT(self, *args, **kwargs): # real signature unknown
        pass

    def visit_stmt(self, *args, **kwargs): # real signature unknown
        pass

    def visit_STRING(self, *args, **kwargs): # real signature unknown
        pass

    def visit_suite(self, *args, **kwargs): # real signature unknown
        pass

    def visit_test(self, *args, **kwargs): # real signature unknown
        pass

    def visit_tname(self, *args, **kwargs): # real signature unknown
        pass

    def visit_typeparams(self, *args, **kwargs): # real signature unknown
        pass

    def visit_typevartuple(self, *args, **kwargs): # real signature unknown
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __post_init__(self, *args, **kwargs): # real signature unknown
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    current_line = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    features = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    mode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_assert_stmt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_async_funcdef = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_case_block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_classdef = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_decorated = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_del_stmt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_except_clause = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_expr_stmt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_for_stmt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_guard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_if_stmt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_import_from = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_match_stmt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_return_stmt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_try_stmt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_while_stmt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    visit_with_stmt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __dict__ = None # (!) real value is "mappingproxy({'__orig_bases__': (black.nodes.Visitor[black.lines.Line],), '__new__': <built-in method __new__ of type object at 0x0000026B94FA07C0>, '__init__': <slot wrapper '__init__' of 'LineGenerator' objects>, 'line': <method 'line' of 'LineGenerator' objects>, 'visit_default': <method 'visit_default' of 'LineGenerator' objects>, 'visit_test': <method 'visit_test' of 'LineGenerator' objects>, 'visit_INDENT': <method 'visit_INDENT' of 'LineGenerator' objects>, 'visit_DEDENT': <method 'visit_DEDENT' of 'LineGenerator' objects>, 'visit_stmt': <method 'visit_stmt' of 'LineGenerator' objects>, 'visit_typeparams': <method 'visit_typeparams' of 'LineGenerator' objects>, 'visit_typevartuple': <method 'visit_typevartuple' of 'LineGenerator' objects>, 'visit_paramspec': <method 'visit_paramspec' of 'LineGenerator' objects>, 'visit_dictsetmaker': <method 'visit_dictsetmaker' of 'LineGenerator' objects>, 'visit_funcdef': <method 'visit_funcdef' of 'LineGenerator' objects>, 'visit_match_case': <method 'visit_match_case' of 'LineGenerator' objects>, 'visit_suite': <method 'visit_suite' of 'LineGenerator' objects>, 'visit_simple_stmt': <method 'visit_simple_stmt' of 'LineGenerator' objects>, 'visit_async_stmt': <method 'visit_async_stmt' of 'LineGenerator' objects>, 'visit_decorators': <method 'visit_decorators' of 'LineGenerator' objects>, 'visit_power': <method 'visit_power' of 'LineGenerator' objects>, 'visit_SEMI': <method 'visit_SEMI' of 'LineGenerator' objects>, 'visit_ENDMARKER': <method 'visit_ENDMARKER' of 'LineGenerator' objects>, 'visit_STANDALONE_COMMENT': <method 'visit_STANDALONE_COMMENT' of 'LineGenerator' objects>, 'visit_factor': <method 'visit_factor' of 'LineGenerator' objects>, 'visit_tname': <method 'visit_tname' of 'LineGenerator' objects>, 'visit_STRING': <method 'visit_STRING' of 'LineGenerator' objects>, 'visit_NUMBER': <method 'visit_NUMBER' of 'LineGenerator' objects>, 'visit_fstring': <method 'visit_fstring' of 'LineGenerator' objects>, '__post_init__': <method '__post_init__' of 'LineGenerator' objects>, '__setstate__': <method '__setstate__' of 'LineGenerator' objects>, '__getstate__': <method '__getstate__' of 'LineGenerator' objects>, '__dict__': <member '__dict__' of 'LineGenerator' objects>, '__weakref__': <member '__weakref__' of 'LineGenerator' objects>, 'mode': <attribute 'mode' of 'LineGenerator' objects>, 'features': <attribute 'features' of 'LineGenerator' objects>, 'current_line': <attribute 'current_line' of 'LineGenerator' objects>, 'visit_assert_stmt': <attribute 'visit_assert_stmt' of 'LineGenerator' objects>, 'visit_if_stmt': <attribute 'visit_if_stmt' of 'LineGenerator' objects>, 'visit_while_stmt': <attribute 'visit_while_stmt' of 'LineGenerator' objects>, 'visit_for_stmt': <attribute 'visit_for_stmt' of 'LineGenerator' objects>, 'visit_try_stmt': <attribute 'visit_try_stmt' of 'LineGenerator' objects>, 'visit_except_clause': <attribute 'visit_except_clause' of 'LineGenerator' objects>, 'visit_with_stmt': <attribute 'visit_with_stmt' of 'LineGenerator' objects>, 'visit_classdef': <attribute 'visit_classdef' of 'LineGenerator' objects>, 'visit_expr_stmt': <attribute 'visit_expr_stmt' of 'LineGenerator' objects>, 'visit_return_stmt': <attribute 'visit_return_stmt' of 'LineGenerator' objects>, 'visit_import_from': <attribute 'visit_import_from' of 'LineGenerator' objects>, 'visit_del_stmt': <attribute 'visit_del_stmt' of 'LineGenerator' objects>, 'visit_async_funcdef': <attribute 'visit_async_funcdef' of 'LineGenerator' objects>, 'visit_decorated': <attribute 'visit_decorated' of 'LineGenerator' objects>, 'visit_match_stmt': <attribute 'visit_match_stmt' of 'LineGenerator' objects>, 'visit_case_block': <attribute 'visit_case_block' of 'LineGenerator' objects>, 'visit_guard': <attribute 'visit_guard' of 'LineGenerator' objects>, '__doc__': None, '__module__': 'black.linegen', '__parameters__': (), '__mypyc_attrs__': ('mode', 'features', 'current_line', 'visit_assert_stmt', 'visit_if_stmt', 'visit_while_stmt', 'visit_for_stmt', 'visit_try_stmt', 'visit_except_clause', 'visit_with_stmt', 'visit_classdef', 'visit_expr_stmt', 'visit_return_stmt', 'visit_import_from', 'visit_del_stmt', 'visit_async_funcdef', 'visit_decorated', 'visit_match_stmt', 'visit_case_block', 'visit_guard', '__dict__')})"
    __mypyc_attrs__ = (
        'mode',
        'features',
        'current_line',
        'visit_assert_stmt',
        'visit_if_stmt',
        'visit_while_stmt',
        'visit_for_stmt',
        'visit_try_stmt',
        'visit_except_clause',
        'visit_with_stmt',
        'visit_classdef',
        'visit_expr_stmt',
        'visit_return_stmt',
        'visit_import_from',
        'visit_del_stmt',
        'visit_async_funcdef',
        'visit_decorated',
        'visit_match_stmt',
        'visit_case_block',
        'visit_guard',
        '__dict__',
    )
    __orig_bases__ = (
        black.nodes.Visitor[black.lines.Line],
    )
    __parameters__ = ()


class partial(object):
    """
    partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
    """
    def __call__(self, *args, **kwargs): # real signature unknown
        """ Call self as a function. """
        pass

    @classmethod
    def __class_getitem__(cls, *args, **kwargs): # real signature unknown
        """ See PEP 585 """
        pass

    def __delattr__(self, *args, **kwargs): # real signature unknown
        """ Implement delattr(self, name). """
        pass

    def __getattribute__(self, *args, **kwargs): # real signature unknown
        """ Return getattr(self, name). """
        pass

    def __init__(self, func, *args, **keywords): # real signature unknown; restored from __doc__
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __reduce__(self, *args, **kwargs): # real signature unknown
        pass

    def __repr__(self, *args, **kwargs): # real signature unknown
        """ Return repr(self). """
        pass

    def __setattr__(self, *args, **kwargs): # real signature unknown
        """ Implement setattr(self, name, value). """
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    args = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """tuple of arguments to future partial calls"""

    func = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """function object to use in future partial calls"""

    keywords = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """dictionary of keyword arguments to future partial calls"""

    __vectorcalloffset__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __dict__ = None # (!) real value is "mappingproxy({'__new__': <built-in method __new__ of type object at 0x0000026B948002D0>, '__repr__': <slot wrapper '__repr__' of 'functools.partial' objects>, '__call__': <slot wrapper '__call__' of 'functools.partial' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'functools.partial' objects>, '__setattr__': <slot wrapper '__setattr__' of 'functools.partial' objects>, '__delattr__': <slot wrapper '__delattr__' of 'functools.partial' objects>, '__reduce__': <method '__reduce__' of 'functools.partial' objects>, '__setstate__': <method '__setstate__' of 'functools.partial' objects>, '__class_getitem__': <method '__class_getitem__' of 'functools.partial' objects>, 'func': <member 'func' of 'functools.partial' objects>, 'args': <member 'args' of 'functools.partial' objects>, 'keywords': <member 'keywords' of 'functools.partial' objects>, '__vectorcalloffset__': <member '__vectorcalloffset__' of 'functools.partial' objects>, '__dict__': <attribute '__dict__' of 'functools.partial' objects>, '__doc__': 'partial(func, *args, **keywords) - new function with partial application\\n    of the given arguments and keywords.\\n', '__module__': 'functools'})"


class _BracketSplitComponent(__enum.Enum):
    """ mypyc filler docstring """
    def _generate_next_value_(name, start, count, last_values): # reliably restored by inspect
        """
        Generate the next value when not given.
        
                name: the name of the member
                start: the initial start value or None
                count: the number of existing members
                last_values: the list of values assigned
        """
        pass

    def _new_member_(self, *args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __init__(self, *args, **kwds): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(cls, value): # reliably restored by inspect
        # no doc
        pass

    body = None # (!) real value is '<_BracketSplitComponent.body: 2>'
    head = None # (!) real value is '<_BracketSplitComponent.head: 1>'
    tail = None # (!) real value is '<_BracketSplitComponent.tail: 3>'
    _member_map_ = {
        'body': None, # (!) real value is '<_BracketSplitComponent.body: 2>'
        'head': None, # (!) real value is '<_BracketSplitComponent.head: 1>'
        'tail': None, # (!) real value is '<_BracketSplitComponent.tail: 3>'
    }
    _member_names_ = [
        'head',
        'body',
        'tail',
    ]
    _member_type_ = object
    _unhashable_values_ = []
    _use_args_ = False
    _value2member_map_ = {
        1: None, # (!) real value is '<_BracketSplitComponent.head: 1>'
        2: None, # (!) real value is '<_BracketSplitComponent.body: 2>'
        3: None, # (!) real value is '<_BracketSplitComponent.tail: 3>'
    }
    _value_repr_ = None
    __annotations__ = {
        'body': type,
        'head': '<value is a self-reference, replaced by this string>',
        'tail': '<value is a self-reference, replaced by this string>',
    }


# variables with complex values

ASSIGNMENTS = None # (!) real value is "{'@=', '-=', '**=', ':', '^=', '>>=', '//=', '&=', '/=', '+=', '|=', '%=', '=', '*=', '<<='}"

BRACKETS = None # (!) real value is '{10, 7, 8, 9, 26, 27}'

CLOSING_BRACKETS = None # (!) real value is '{8, 10, 27}'

FMT_OFF = None # (!) real value is "{'# fmt:off', '# yapf: disable', '# fmt: off'}"

MIGRATE_COMMENT_DELIMITERS = None # (!) real value is '{18, 12}'

OPENING_BRACKETS = None # (!) real value is '{9, 26, 7}'

STATEMENT = None # (!) real value is '{289, 295, 362, 363, 300, 270, 303, 271, 311, 351}'

WHITESPACE = None # (!) real value is '{4, 5, 6}'

__loader__ = None # (!) real value is '<_frozen_importlib_external.ExtensionFileLoader object at 0x0000026B970FE210>'

__spec__ = None # (!) real value is "ModuleSpec(name='black.linegen', loader=<_frozen_importlib_external.ExtensionFileLoader object at 0x0000026B970FE210>, origin='C:\\\\Users\\\\kosta\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\Lib\\\\site-packages\\\\black\\\\linegen.cp311-win_amd64.pyd')"

