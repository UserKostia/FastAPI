# encoding: utf-8
# module black.lines
# from C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\lines.cp311-win_amd64.pyd
# by generator 1.147
# no doc

# imports
import itertools as itertools # <module 'itertools' (built-in)>
import math as math # <module 'math' (built-in)>
import blib2to3.pgen2.token as token # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\blib2to3\pgen2\token.cp311-win_amd64.pyd
from black.brackets import BracketTracker

from black.mode import Mode, Preview

from black.nodes import (child_towards, is_docstring, is_import, 
    is_multiline_string, is_one_sequence_between, is_type_comment, 
    is_type_ignore_comment, is_with_or_async_with_stmt, make_simple_prefix, 
    replace_child, whitespace)

from black.strings import str_width

from blib2to3.pygram import syms

from blib2to3.pytree import Leaf, Node

import typing as __typing


# Variables with simple values

COMMA_PRIORITY = 18

DOT_PRIORITY = 1

STANDALONE_COMMENT = 153

# functions

def append_leaves(*args, **kwargs): # real signature unknown
    pass

def Callable(*args, **kwargs): # real signature unknown
    """
    Deprecated alias to collections.abc.Callable.
    
        Callable[[int], str] signifies a function of (int) -> str.
        The subscription syntax must always be used with exactly two
        values: the argument list and the return type.
        The argument list must be a list of types, a ParamSpec or ellipsis.
        The return type must be a single type.
    
        There is no syntax to indicate optional or keyword arguments;
        such function types are rarely used as callback types.
    """
    pass

def can_be_split(*args, **kwargs): # real signature unknown
    pass

def can_omit_invisible_parens(*args, **kwargs): # real signature unknown
    pass

def cast(typ, val): # reliably restored by inspect
    """
    Cast a value to a type.
    
        This returns the value unchanged.  To the type checker this
        signals that the return value has the designated type, but at
        runtime we intentionally don't check anything (we want this
        to be as fast as possible).
    """
    pass

def dataclass(cls=None, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False): # reliably restored by inspect
    """
    Add dunder methods based on the fields defined in the class.
    
        Examines PEP 526 __annotations__ to determine fields.
    
        If init is true, an __init__() method is added to the class. If repr
        is true, a __repr__() method is added. If order is true, rich
        comparison dunder methods are added. If unsafe_hash is true, a
        __hash__() method is added. If frozen is true, fields may not be
        assigned to after instance creation. If match_args is true, the
        __match_args__ tuple is added. If kw_only is true, then by default
        all fields are keyword-only. If slots is true, a new class with a
        __slots__ attribute is returned.
    """
    pass

def Dict(*args, **kwargs): # real signature unknown
    """ A generic version of dict. """
    pass

def enumerate_reversed(*args, **kwargs): # real signature unknown
    pass

def field(*, default='<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>', default_factory='<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>', init=True, repr=True, hash=None, compare=True, metadata=None, kw_only='<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>'): # reliably restored by inspect
    """
    Return an object to identify dataclass fields.
    
        default is the default value of the field.  default_factory is a
        0-argument function called to initialize a field's value.  If init
        is true, the field will be a parameter to the class's __init__()
        function.  If repr is true, the field will be included in the
        object's repr().  If hash is true, the field will be included in the
        object's hash().  If compare is true, the field will be used in
        comparison functions.  metadata, if specified, must be a mapping
        which is stored but not otherwise examined by dataclass.  If kw_only
        is true, the field will become a keyword-only parameter to
        __init__().
    
        It is an error to specify both default and default_factory.
    """
    pass

def is_line_short_enough(*args, **kwargs): # real signature unknown
    pass

def Iterator(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Iterator. """
    pass

def line_to_string(*args, **kwargs): # real signature unknown
    pass

def List(*args, **kwargs): # real signature unknown
    """ A generic version of list. """
    pass

def LN(*args, **kwargs): # real signature unknown
    pass

def Optional(*args, **kwargs): # real signature unknown
    """ Optional[X] is equivalent to Union[X, None]. """
    pass

def Sequence(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Sequence. """
    pass

def Tuple(*args, **kwargs): # real signature unknown
    """
    Deprecated alias to builtins.tuple.
    
        Tuple[X, Y] is the cross-product type of X and Y.
    
        Example: Tuple[T1, T2] is a tuple of two elements corresponding
        to type variables T1 and T2.  Tuple[int, float, str] is a tuple
        of an int, a float and a string.
    
        To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
    """
    pass

def Union(*args, **kwargs): # real signature unknown
    """
    Union type; Union[X, Y] means either X or Y.
    
        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].
    
        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::
    
            assert Union[Union[int, str], float] == Union[int, str, float]
    
        - Unions of a single argument vanish, e.g.::
    
            assert Union[int] == int  # The constructor actually returns int
    
        - Redundant arguments are skipped, e.g.::
    
            assert Union[int, str, int] == Union[int, str]
    
        - When comparing unions, the argument order is ignored, e.g.::
    
            assert Union[int, str] == Union[str, int]
    
        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].
    """
    pass

def _can_omit_closing_paren(*args, **kwargs): # real signature unknown
    pass

def _can_omit_opening_paren(*args, **kwargs): # real signature unknown
    pass

# classes

class EmptyLineTracker(object):
    # no doc
    def maybe_empty_lines(self, *args, **kwargs): # real signature unknown
        pass

    def _maybe_empty_lines(self, *args, **kwargs): # real signature unknown
        pass

    def _maybe_empty_lines_for_class_or_def(self, *args, **kwargs): # real signature unknown
        pass

    def __eq__(self, other): # reliably restored by inspect
        # no doc
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, mode, previous_line=None, previous_block=None, previous_defs='<factory>', semantic_leading_comment=None): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __repr__(self): # reliably restored by inspect
        # no doc
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    mode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    previous_block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    previous_defs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    previous_line = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    semantic_leading_comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __annotations__ = {
        'mode': None, # (!) forward: Mode, real value is "<class 'black.mode.Mode'>"
        'previous_block': type,
        'previous_defs': list,
        'previous_line': '<value is a self-reference, replaced by this string>',
        'semantic_leading_comment': '<value is a self-reference, replaced by this string>',
    }
    __dataclass_fields__ = {
        'mode': None, # (!) real value is "Field(name='mode',type=<class 'black.mode.Mode'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'previous_block': None, # (!) real value is "Field(name='previous_block',type=<class 'type'>,default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'previous_defs': None, # (!) real value is "Field(name='previous_defs',type=<class 'list'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'previous_line': None, # (!) real value is "Field(name='previous_line',type=<class 'type'>,default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'semantic_leading_comment': None, # (!) real value is "Field(name='semantic_leading_comment',type=<class 'type'>,default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
    }
    __dataclass_params__ = _DataclassParams(init=True,repr=True,eq=True,order=False,unsafe_hash=False,frozen=False)
    __hash__ = None
    __match_args__ = (
        'mode',
        'previous_line',
        'previous_block',
        'previous_defs',
        'semantic_leading_comment',
    )
    __mypyc_attrs__ = (
        'mode',
        'previous_line',
        'previous_block',
        'previous_defs',
        'semantic_leading_comment',
    )


class LeafID(object):
    """
    int([x]) -> integer
    int(x, base=10) -> integer
    
    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.
    
    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
    """
    def as_integer_ratio(self): # real signature unknown; restored from __doc__
        """
        Return integer ratio.
        
        Return a pair of integers, whose ratio is exactly equal to the original int
        and with a positive denominator.
        
        >>> (10).as_integer_ratio()
        (10, 1)
        >>> (-10).as_integer_ratio()
        (-10, 1)
        >>> (0).as_integer_ratio()
        (0, 1)
        """
        pass

    def bit_count(self): # real signature unknown; restored from __doc__
        """
        Number of ones in the binary representation of the absolute value of self.
        
        Also known as the population count.
        
        >>> bin(13)
        '0b1101'
        >>> (13).bit_count()
        3
        """
        pass

    def bit_length(self): # real signature unknown; restored from __doc__
        """
        Number of bits necessary to represent self in binary.
        
        >>> bin(37)
        '0b100101'
        >>> (37).bit_length()
        6
        """
        pass

    def conjugate(self, *args, **kwargs): # real signature unknown
        """ Returns self, the complex conjugate of any int. """
        pass

    @classmethod
    def from_bytes(cls, *args, **kwargs): # real signature unknown
        """
        Return the integer represented by the given array of bytes.
        
          bytes
            Holds the array of bytes to convert.  The argument must either
            support the buffer protocol or be an iterable object producing bytes.
            Bytes and bytearray are examples of built-in objects that support the
            buffer protocol.
          byteorder
            The byte order used to represent the integer.  If byteorder is 'big',
            the most significant byte is at the beginning of the byte array.  If
            byteorder is 'little', the most significant byte is at the end of the
            byte array.  To request the native byte order of the host system, use
            `sys.byteorder' as the byte order value.  Default is to use 'big'.
          signed
            Indicates whether two's complement is used to represent the integer.
        """
        pass

    def to_bytes(self, *args, **kwargs): # real signature unknown
        """
        Return an array of bytes representing an integer.
        
          length
            Length of bytes object to use.  An OverflowError is raised if the
            integer is not representable with the given number of bytes.  Default
            is length 1.
          byteorder
            The byte order used to represent the integer.  If byteorder is 'big',
            the most significant byte is at the beginning of the byte array.  If
            byteorder is 'little', the most significant byte is at the end of the
            byte array.  To request the native byte order of the host system, use
            `sys.byteorder' as the byte order value.  Default is to use 'big'.
          signed
            Determines whether two's complement is used to represent the integer.
            If signed is False and a negative integer is given, an OverflowError
            is raised.
        """
        pass

    def __abs__(self, *args, **kwargs): # real signature unknown
        """ abs(self) """
        pass

    def __add__(self, *args, **kwargs): # real signature unknown
        """ Return self+value. """
        pass

    def __and__(self, *args, **kwargs): # real signature unknown
        """ Return self&value. """
        pass

    def __bool__(self, *args, **kwargs): # real signature unknown
        """ True if self else False """
        pass

    def __ceil__(self, *args, **kwargs): # real signature unknown
        """ Ceiling of an Integral returns itself. """
        pass

    def __divmod__(self, *args, **kwargs): # real signature unknown
        """ Return divmod(self, value). """
        pass

    def __eq__(self, *args, **kwargs): # real signature unknown
        """ Return self==value. """
        pass

    def __float__(self, *args, **kwargs): # real signature unknown
        """ float(self) """
        pass

    def __floordiv__(self, *args, **kwargs): # real signature unknown
        """ Return self//value. """
        pass

    def __floor__(self, *args, **kwargs): # real signature unknown
        """ Flooring an Integral returns itself. """
        pass

    def __format__(self, *args, **kwargs): # real signature unknown
        pass

    def __getattribute__(self, *args, **kwargs): # real signature unknown
        """ Return getattr(self, name). """
        pass

    def __getnewargs__(self, *args, **kwargs): # real signature unknown
        pass

    def __ge__(self, *args, **kwargs): # real signature unknown
        """ Return self>=value. """
        pass

    def __gt__(self, *args, **kwargs): # real signature unknown
        """ Return self>value. """
        pass

    def __hash__(self, *args, **kwargs): # real signature unknown
        """ Return hash(self). """
        pass

    def __index__(self, *args, **kwargs): # real signature unknown
        """ Return self converted to an integer, if self is suitable for use as an index into a list. """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __int__(self, *args, **kwargs): # real signature unknown
        """ int(self) """
        pass

    def __invert__(self, *args, **kwargs): # real signature unknown
        """ ~self """
        pass

    def __le__(self, *args, **kwargs): # real signature unknown
        """ Return self<=value. """
        pass

    def __lshift__(self, *args, **kwargs): # real signature unknown
        """ Return self<<value. """
        pass

    def __lt__(self, *args, **kwargs): # real signature unknown
        """ Return self<value. """
        pass

    def __mod__(self, *args, **kwargs): # real signature unknown
        """ Return self%value. """
        pass

    def __mul__(self, *args, **kwargs): # real signature unknown
        """ Return self*value. """
        pass

    def __neg__(self, *args, **kwargs): # real signature unknown
        """ -self """
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __ne__(self, *args, **kwargs): # real signature unknown
        """ Return self!=value. """
        pass

    def __or__(self, *args, **kwargs): # real signature unknown
        """ Return self|value. """
        pass

    def __pos__(self, *args, **kwargs): # real signature unknown
        """ +self """
        pass

    def __pow__(self, *args, **kwargs): # real signature unknown
        """ Return pow(self, value, mod). """
        pass

    def __radd__(self, *args, **kwargs): # real signature unknown
        """ Return value+self. """
        pass

    def __rand__(self, *args, **kwargs): # real signature unknown
        """ Return value&self. """
        pass

    def __rdivmod__(self, *args, **kwargs): # real signature unknown
        """ Return divmod(value, self). """
        pass

    def __repr__(self, *args, **kwargs): # real signature unknown
        """ Return repr(self). """
        pass

    def __rfloordiv__(self, *args, **kwargs): # real signature unknown
        """ Return value//self. """
        pass

    def __rlshift__(self, *args, **kwargs): # real signature unknown
        """ Return value<<self. """
        pass

    def __rmod__(self, *args, **kwargs): # real signature unknown
        """ Return value%self. """
        pass

    def __rmul__(self, *args, **kwargs): # real signature unknown
        """ Return value*self. """
        pass

    def __ror__(self, *args, **kwargs): # real signature unknown
        """ Return value|self. """
        pass

    def __round__(self, *args, **kwargs): # real signature unknown
        """
        Rounding an Integral returns itself.
        
        Rounding with an ndigits argument also returns an integer.
        """
        pass

    def __rpow__(self, *args, **kwargs): # real signature unknown
        """ Return pow(value, self, mod). """
        pass

    def __rrshift__(self, *args, **kwargs): # real signature unknown
        """ Return value>>self. """
        pass

    def __rshift__(self, *args, **kwargs): # real signature unknown
        """ Return self>>value. """
        pass

    def __rsub__(self, *args, **kwargs): # real signature unknown
        """ Return value-self. """
        pass

    def __rtruediv__(self, *args, **kwargs): # real signature unknown
        """ Return value/self. """
        pass

    def __rxor__(self, *args, **kwargs): # real signature unknown
        """ Return value^self. """
        pass

    def __sizeof__(self, *args, **kwargs): # real signature unknown
        """ Returns size in memory, in bytes. """
        pass

    def __sub__(self, *args, **kwargs): # real signature unknown
        """ Return self-value. """
        pass

    def __truediv__(self, *args, **kwargs): # real signature unknown
        """ Return self/value. """
        pass

    def __trunc__(self, *args, **kwargs): # real signature unknown
        """ Truncating an Integral returns itself. """
        pass

    def __xor__(self, *args, **kwargs): # real signature unknown
        """ Return self^value. """
        pass

    denominator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the denominator of a rational number in lowest terms"""

    imag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the imaginary part of a complex number"""

    numerator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the numerator of a rational number in lowest terms"""

    real = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the real part of a complex number"""



Index = LeafID


class Line(object):
    # no doc
    def append(self, *args, **kwargs): # real signature unknown
        pass

    def append_comment(self, *args, **kwargs): # real signature unknown
        pass

    def append_safe(self, *args, **kwargs): # real signature unknown
        pass

    def clone(self, *args, **kwargs): # real signature unknown
        pass

    def comments_after(self, *args, **kwargs): # real signature unknown
        pass

    def contains_implicit_multiline_string_with_comments(self, *args, **kwargs): # real signature unknown
        pass

    def contains_multiline_strings(self, *args, **kwargs): # real signature unknown
        pass

    def contains_standalone_comments(self, *args, **kwargs): # real signature unknown
        pass

    def contains_uncollapsable_type_comments(self, *args, **kwargs): # real signature unknown
        pass

    def contains_unsplittable_type_ignore(self, *args, **kwargs): # real signature unknown
        pass

    def enumerate_with_length(self, *args, **kwargs): # real signature unknown
        pass

    def has_magic_trailing_comma(self, *args, **kwargs): # real signature unknown
        pass

    def is_complex_subscript(self, *args, **kwargs): # real signature unknown
        pass

    def is_fmt_pass_converted(self, *args, **kwargs): # real signature unknown
        pass

    def remove_trailing_comma(self, *args, **kwargs): # real signature unknown
        pass

    def __bool__(self, *args, **kwargs): # real signature unknown
        """ True if self else False """
        pass

    def __eq__(self, other): # reliably restored by inspect
        # no doc
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, mode, depth=0, leaves='<factory>', comments='<factory>', bracket_tracker='<factory>', inside_brackets=False, should_split_rhs=False, magic_trailing_comma=None): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __repr__(self): # reliably restored by inspect
        # no doc
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __str__(self, *args, **kwargs): # real signature unknown
        """ Return str(self). """
        pass

    bracket_tracker = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    depth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    inside_brackets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    is_chained_assignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    is_class = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    is_class_paren_empty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    is_comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    is_decorator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    is_def = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    is_docstring = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    is_import = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    is_stub_class = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    is_stub_def = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    is_with_or_async_with_stmt = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    leaves = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    magic_trailing_comma = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    mode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    opens_block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    should_split_rhs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    _is_triple_quoted_string = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __annotations__ = {
        'bracket_tracker': None, # (!) forward: BracketTracker, real value is "<class 'black.brackets.BracketTracker'>"
        'comments': dict,
        'depth': int,
        'inside_brackets': bool,
        'leaves': list,
        'magic_trailing_comma': type,
        'mode': None, # (!) forward: Mode, real value is "<class 'black.mode.Mode'>"
        'should_split_rhs': '<value is a self-reference, replaced by this string>',
    }
    __dataclass_fields__ = {
        'bracket_tracker': None, # (!) real value is "Field(name='bracket_tracker',type=<class 'black.brackets.BracketTracker'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<class 'black.brackets.BracketTracker'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'comments': None, # (!) real value is "Field(name='comments',type=<class 'dict'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<class 'dict'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'depth': None, # (!) real value is "Field(name='depth',type=<class 'int'>,default=0,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'inside_brackets': None, # (!) real value is "Field(name='inside_brackets',type=<class 'bool'>,default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'leaves': None, # (!) real value is "Field(name='leaves',type=<class 'list'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'magic_trailing_comma': None, # (!) real value is "Field(name='magic_trailing_comma',type=<class 'type'>,default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'mode': None, # (!) real value is "Field(name='mode',type=<class 'black.mode.Mode'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=False,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'should_split_rhs': None, # (!) real value is "Field(name='should_split_rhs',type=<class 'bool'>,default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
    }
    __dataclass_params__ = _DataclassParams(init=True,repr=True,eq=True,order=False,unsafe_hash=False,frozen=False)
    __hash__ = None
    __match_args__ = (
        'mode',
        'depth',
        'leaves',
        'comments',
        'bracket_tracker',
        'inside_brackets',
        'should_split_rhs',
        'magic_trailing_comma',
    )
    __mypyc_attrs__ = (
        'mode',
        'depth',
        'leaves',
        'comments',
        'bracket_tracker',
        'inside_brackets',
        'should_split_rhs',
        'magic_trailing_comma',
    )


class LinesBlock(object):
    # no doc
    def all_lines(self, *args, **kwargs): # real signature unknown
        pass

    def __eq__(self, other): # reliably restored by inspect
        # no doc
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, mode, previous_block, original_line, before=0, content_lines='<factory>', after=0, form_feed=False): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __repr__(self): # reliably restored by inspect
        # no doc
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    after = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    before = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    content_lines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    form_feed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    mode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    original_line = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    previous_block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __annotations__ = {
        'after': int,
        'before': '<value is a self-reference, replaced by this string>',
        'content_lines': list,
        'form_feed': bool,
        'mode': None, # (!) forward: Mode, real value is "<class 'black.mode.Mode'>"
        'original_line': Line,
        'previous_block': type,
    }
    __dataclass_fields__ = {
        'after': None, # (!) real value is "Field(name='after',type=<class 'int'>,default=0,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'before': None, # (!) real value is "Field(name='before',type=<class 'int'>,default=0,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'content_lines': None, # (!) real value is "Field(name='content_lines',type=<class 'list'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'form_feed': None, # (!) real value is "Field(name='form_feed',type=<class 'bool'>,default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'mode': None, # (!) real value is "Field(name='mode',type=<class 'black.mode.Mode'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'original_line': None, # (!) real value is "Field(name='original_line',type=<class 'black.lines.Line'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'previous_block': None, # (!) real value is "Field(name='previous_block',type=<class 'type'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
    }
    __dataclass_params__ = _DataclassParams(init=True,repr=True,eq=True,order=False,unsafe_hash=False,frozen=False)
    __hash__ = None
    __match_args__ = (
        'mode',
        'previous_block',
        'original_line',
        'before',
        'content_lines',
        'after',
        'form_feed',
    )
    __mypyc_attrs__ = (
        'mode',
        'previous_block',
        'original_line',
        'before',
        'content_lines',
        'after',
        'form_feed',
    )


class RHSResult(object):
    # no doc
    def __eq__(self, other): # reliably restored by inspect
        # no doc
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, head, body, tail, opening_bracket, closing_bracket): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __repr__(self): # reliably restored by inspect
        # no doc
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    body = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    closing_bracket = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    head = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    opening_bracket = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    tail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __annotations__ = {
        'body': Line,
        'closing_bracket': None, # (!) forward: Leaf, real value is "<class 'blib2to3.pytree.Leaf'>"
        'head': '<value is a self-reference, replaced by this string>',
        'opening_bracket': '<value is a self-reference, replaced by this string>',
        'tail': '<value is a self-reference, replaced by this string>',
    }
    __dataclass_fields__ = {
        'body': None, # (!) real value is "Field(name='body',type=<class 'black.lines.Line'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'closing_bracket': None, # (!) real value is "Field(name='closing_bracket',type=<class 'blib2to3.pytree.Leaf'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'head': None, # (!) real value is "Field(name='head',type=<class 'black.lines.Line'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'opening_bracket': None, # (!) real value is "Field(name='opening_bracket',type=<class 'blib2to3.pytree.Leaf'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'tail': None, # (!) real value is "Field(name='tail',type=<class 'black.lines.Line'>,default=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001B5A31C47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
    }
    __dataclass_params__ = _DataclassParams(init=True,repr=True,eq=True,order=False,unsafe_hash=False,frozen=False)
    __hash__ = None
    __match_args__ = (
        'head',
        'body',
        'tail',
        'opening_bracket',
        'closing_bracket',
    )
    __mypyc_attrs__ = (
        'head',
        'body',
        'tail',
        'opening_bracket',
        'closing_bracket',
    )


class TypeVar(__typing._Final, __typing._Immutable, __typing._BoundVarianceMixin, __typing._PickleUsingNameMixin):
    """
    Type variable.
    
        Usage::
    
          T = TypeVar('T')  # Can be anything
          A = TypeVar('A', str, bytes)  # Must be str or bytes
    
        Type variables exist primarily for the benefit of static type
        checkers.  They serve as the parameters for generic types as well
        as for generic function definitions.  See class Generic for more
        information on generic types.  Generic functions work as follows:
    
          def repeat(x: T, n: int) -> List[T]:
              '''Return a list containing n references to x.'''
              return [x]*n
    
          def longest(x: A, y: A) -> A:
              '''Return the longest of two strings.'''
              return x if len(x) >= len(y) else y
    
        The latter example's signature is essentially the overloading
        of (str, str) -> str and (bytes, bytes) -> bytes.  Also note
        that if the arguments are instances of some subclass of str,
        the return type is still plain str.
    
        At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.
    
        Type variables defined with covariant=True or contravariant=True
        can be used to declare covariant or contravariant generic types.
        See PEP 484 for more details. By default generic types are invariant
        in all type variables.
    
        Type variables can be introspected. e.g.:
    
          T.__name__ == 'T'
          T.__constraints__ == ()
          T.__covariant__ == False
          T.__contravariant__ = False
          A.__constraints__ == (str, bytes)
    
        Note that only type variables defined in global scope can be pickled.
    """
    def __init__(self, name, *constraints, bound=None, covariant=False, contravariant=False): # reliably restored by inspect
        # no doc
        pass

    def __typing_subst__(self, arg): # reliably restored by inspect
        # no doc
        pass

    __dict__ = None # (!) real value is 'mappingproxy({\'__module__\': \'typing\', \'__doc__\': "Type variable.\\n\\n    Usage::\\n\\n      T = TypeVar(\'T\')  # Can be anything\\n      A = TypeVar(\'A\', str, bytes)  # Must be str or bytes\\n\\n    Type variables exist primarily for the benefit of static type\\n    checkers.  They serve as the parameters for generic types as well\\n    as for generic function definitions.  See class Generic for more\\n    information on generic types.  Generic functions work as follows:\\n\\n      def repeat(x: T, n: int) -> List[T]:\\n          \'\'\'Return a list containing n references to x.\'\'\'\\n          return [x]*n\\n\\n      def longest(x: A, y: A) -> A:\\n          \'\'\'Return the longest of two strings.\'\'\'\\n          return x if len(x) >= len(y) else y\\n\\n    The latter example\'s signature is essentially the overloading\\n    of (str, str) -> str and (bytes, bytes) -> bytes.  Also note\\n    that if the arguments are instances of some subclass of str,\\n    the return type is still plain str.\\n\\n    At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.\\n\\n    Type variables defined with covariant=True or contravariant=True\\n    can be used to declare covariant or contravariant generic types.\\n    See PEP 484 for more details. By default generic types are invariant\\n    in all type variables.\\n\\n    Type variables can be introspected. e.g.:\\n\\n      T.__name__ == \'T\'\\n      T.__constraints__ == ()\\n      T.__covariant__ == False\\n      T.__contravariant__ = False\\n      A.__constraints__ == (str, bytes)\\n\\n    Note that only type variables defined in global scope can be pickled.\\n    ", \'__init__\': <function TypeVar.__init__ at 0x000001B5A13B82C0>, \'__typing_subst__\': <function TypeVar.__typing_subst__ at 0x000001B5A13B8360>, \'__dict__\': <attribute \'__dict__\' of \'TypeVar\' objects>})'


# variables with complex values

BRACKETS = None # (!) real value is '{10, 7, 8, 9, 26, 27}'

CLOSING_BRACKETS = None # (!) real value is '{8, 10, 27}'

OPENING_BRACKETS = None # (!) real value is '{9, 26, 7}'

T = None # (!) real value is '~T'

TEST_DESCENDANTS = None # (!) real value is '{257, 258, 290, 325, 262, 328, 364, 333, 339, 340, 309, 276, 312, 313, 350, 319}'

__loader__ = None # (!) real value is '<_frozen_importlib_external.ExtensionFileLoader object at 0x000001B5A38C0950>'

__spec__ = None # (!) real value is "ModuleSpec(name='black.lines', loader=<_frozen_importlib_external.ExtensionFileLoader object at 0x000001B5A38C0950>, origin='C:\\\\Users\\\\kosta\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\Lib\\\\site-packages\\\\black\\\\lines.cp311-win_amd64.pyd')"

