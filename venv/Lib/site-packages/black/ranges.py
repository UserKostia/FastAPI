# encoding: utf-8
# module black.ranges
# from C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\site-packages\black\ranges.cp311-win_amd64.pyd
# by generator 1.147
# no doc

# imports
import difflib as difflib # C:\Users\kosta\AppData\Local\Programs\Python\Python311\Lib\difflib.py
from black.nodes import (Visitor, first_leaf, 
    furthest_ancestor_with_last_leaf, last_leaf)

from blib2to3.pygram import syms

from blib2to3.pytree import Leaf, Node

import black.nodes as __black_nodes


# Variables with simple values

ASYNC = 57

NEWLINE = 4

STANDALONE_COMMENT = 153

# functions

def adjusted_lines(*args, **kwargs): # real signature unknown
    pass

def Collection(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Collection. """
    pass

def convert_unchanged_lines(*args, **kwargs): # real signature unknown
    pass

def dataclass(cls=None, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False): # reliably restored by inspect
    """
    Add dunder methods based on the fields defined in the class.
    
        Examines PEP 526 __annotations__ to determine fields.
    
        If init is true, an __init__() method is added to the class. If repr
        is true, a __repr__() method is added. If order is true, rich
        comparison dunder methods are added. If unsafe_hash is true, a
        __hash__() method is added. If frozen is true, fields may not be
        assigned to after instance creation. If match_args is true, the
        __match_args__ tuple is added. If kw_only is true, then by default
        all fields are keyword-only. If slots is true, a new class with a
        __slots__ attribute is returned.
    """
    pass

def is_valid_line_range(*args, **kwargs): # real signature unknown
    pass

def Iterator(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Iterator. """
    pass

def List(*args, **kwargs): # real signature unknown
    """ A generic version of list. """
    pass

def LN(*args, **kwargs): # real signature unknown
    pass

def parse_line_ranges(*args, **kwargs): # real signature unknown
    pass

def sanitized_lines(*args, **kwargs): # real signature unknown
    pass

def Sequence(*args, **kwargs): # real signature unknown
    """ A generic version of collections.abc.Sequence. """
    pass

def Set(*args, **kwargs): # real signature unknown
    """ A generic version of set. """
    pass

def Tuple(*args, **kwargs): # real signature unknown
    """
    Deprecated alias to builtins.tuple.
    
        Tuple[X, Y] is the cross-product type of X and Y.
    
        Example: Tuple[T1, T2] is a tuple of two elements corresponding
        to type variables T1 and T2.  Tuple[int, float, str] is a tuple
        of an int, a float and a string.
    
        To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
    """
    pass

def Union(*args, **kwargs): # real signature unknown
    """
    Union type; Union[X, Y] means either X or Y.
    
        On Python 3.10 and higher, the | operator
        can also be used to denote unions;
        X | Y means the same thing to the type checker as Union[X, Y].
    
        To define a union, use e.g. Union[int, str]. Details:
        - The arguments must be types and there must be at least one.
        - None as an argument is a special case and is replaced by
          type(None).
        - Unions of unions are flattened, e.g.::
    
            assert Union[Union[int, str], float] == Union[int, str, float]
    
        - Unions of a single argument vanish, e.g.::
    
            assert Union[int] == int  # The constructor actually returns int
    
        - Redundant arguments are skipped, e.g.::
    
            assert Union[int, str, int] == Union[int, str]
    
        - When comparing unions, the argument order is ignored, e.g.::
    
            assert Union[int, str] == Union[str, int]
    
        - You cannot subclass or instantiate a union.
        - You can use Optional[X] as a shorthand for Union[X, None].
    """
    pass

def _calculate_lines_mappings(*args, **kwargs): # real signature unknown
    pass

def _contains_standalone_comment(*args, **kwargs): # real signature unknown
    pass

def _convert_nodes_to_standalone_comment(*args, **kwargs): # real signature unknown
    pass

def _convert_node_to_standalone_comment(*args, **kwargs): # real signature unknown
    pass

def _convert_unchanged_line_by_line(*args, **kwargs): # real signature unknown
    pass

def _find_lines_mapping_index(*args, **kwargs): # real signature unknown
    pass

def _get_line_range(*args, **kwargs): # real signature unknown
    pass

def _leaf_line_end(*args, **kwargs): # real signature unknown
    pass

# classes

class _LinesMapping(object):
    # no doc
    def __eq__(self, other): # reliably restored by inspect
        # no doc
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, original_start, original_end, modified_start, modified_end, is_changed_block): # reliably restored by inspect
        # no doc
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __repr__(self): # reliably restored by inspect
        # no doc
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    is_changed_block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    modified_end = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    modified_start = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    original_end = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    original_start = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __annotations__ = {
        'is_changed_block': bool,
        'modified_end': int,
        'modified_start': '<value is a self-reference, replaced by this string>',
        'original_end': '<value is a self-reference, replaced by this string>',
        'original_start': '<value is a self-reference, replaced by this string>',
    }
    __dataclass_fields__ = {
        'is_changed_block': None, # (!) real value is "Field(name='is_changed_block',type=<class 'bool'>,default=<dataclasses._MISSING_TYPE object at 0x000001F99D3E47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001F99D3E47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'modified_end': None, # (!) real value is "Field(name='modified_end',type=<class 'int'>,default=<dataclasses._MISSING_TYPE object at 0x000001F99D3E47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001F99D3E47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'modified_start': None, # (!) real value is "Field(name='modified_start',type=<class 'int'>,default=<dataclasses._MISSING_TYPE object at 0x000001F99D3E47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001F99D3E47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'original_end': None, # (!) real value is "Field(name='original_end',type=<class 'int'>,default=<dataclasses._MISSING_TYPE object at 0x000001F99D3E47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001F99D3E47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
        'original_start': None, # (!) real value is "Field(name='original_start',type=<class 'int'>,default=<dataclasses._MISSING_TYPE object at 0x000001F99D3E47D0>,default_factory=<dataclasses._MISSING_TYPE object at 0x000001F99D3E47D0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD)"
    }
    __dataclass_params__ = _DataclassParams(init=True,repr=True,eq=True,order=False,unsafe_hash=False,frozen=False)
    __hash__ = None
    __match_args__ = (
        'original_start',
        'original_end',
        'modified_start',
        'modified_end',
        'is_changed_block',
    )
    __mypyc_attrs__ = (
        'original_start',
        'original_end',
        'modified_start',
        'modified_end',
        'is_changed_block',
    )


class _TopLevelStatementsVisitor(__black_nodes.Visitor):
    # no doc
    def visit_simple_stmt(self, *args, **kwargs): # real signature unknown
        pass

    def visit_suite(self, *args, **kwargs): # real signature unknown
        pass

    def __getstate__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    _lines_set = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    __dict__ = None # (!) real value is "mappingproxy({'__orig_bases__': (black.nodes.Visitor[NoneType],), '__new__': <built-in method __new__ of type object at 0x000001F99B97A3E0>, '__init__': <slot wrapper '__init__' of '_TopLevelStatementsVisitor' objects>, 'visit_simple_stmt': <method 'visit_simple_stmt' of '_TopLevelStatementsVisitor' objects>, 'visit_suite': <method 'visit_suite' of '_TopLevelStatementsVisitor' objects>, '__setstate__': <method '__setstate__' of '_TopLevelStatementsVisitor' objects>, '__getstate__': <method '__getstate__' of '_TopLevelStatementsVisitor' objects>, '__dict__': <member '__dict__' of '_TopLevelStatementsVisitor' objects>, '__weakref__': <member '__weakref__' of '_TopLevelStatementsVisitor' objects>, '_lines_set': <attribute '_lines_set' of '_TopLevelStatementsVisitor' objects>, '__doc__': None, '__module__': 'black.ranges', '__parameters__': (), '__mypyc_attrs__': ('_lines_set', '__dict__')})"
    __mypyc_attrs__ = (
        '_lines_set',
        '__dict__',
    )
    __orig_bases__ = (
        black.nodes.Visitor[NoneType],
    )
    __parameters__ = ()


# variables with complex values

__loader__ = None # (!) real value is '<_frozen_importlib_external.ExtensionFileLoader object at 0x000001F99D56ED90>'

__spec__ = None # (!) real value is "ModuleSpec(name='black.ranges', loader=<_frozen_importlib_external.ExtensionFileLoader object at 0x000001F99D56ED90>, origin='C:\\\\Users\\\\kosta\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\Lib\\\\site-packages\\\\black\\\\ranges.cp311-win_amd64.pyd')"

